<?php

/*
 * Question module
 
 * By: Lucas & Joe
   
 * Still to do: 

    - we should be able to mark garbagy questions as "Won't fix".
    - It would be nice to be able to save questions to a "dossier" of "things
      I'm working on" (integration with collections module?) -- this is related to
      the ability to specify "goals"

 * In progress: Show unanswered questions in the context where they were asked.

 * Things to contemplate:

    - Similar to StackExchange, a question could have multiple answers (NB. much
      like a problem can have multiple solutions, or a collection has multiple
      component elements).  At the moment this isn't the route we take however!

    - Perhaps not too hard to "multiply out" the attachments and the notes, using some
      tricky field reference stuff.  This can be left for another round of prototyping.

    - we would then provide a way to rate the answers or select the best answer etc.
      (la la la!)
 */

function question_node_info() {
 return array(
	      'question' => array(
				    'name' => "Question",
				    'base' => 'node_content',
				    'description' => 'Questions as they come up.',
				    'has_title' => '1',
				    'title_label' => 'Title',
				    'help' => '',
				    ));
}

// Rather than attaching solutions, we can attach places where this question is 
// answered.  In the "requests" case, this would be an article that fulfils the
// request.

function question_menu() {
  $items = array();

  $items['node/ask/question/%'] = array(
      'title' => 'Ask a question about an article',
      'type' => MENU_CALLBACK,
      'page callback' => 'question_attach_question',
      'page arguments' => array(3),
      'access arguments' => array('create correction content')
  );

  // This path is pretty much superseded by the functionality coming from
  // planetmath_attachable_content
  $items['question/%/attach'] = array(
      'title' => 'Attach answer',
      'type' => MENU_CALLBACK,
      'page callback' => 'question_attach_answer',
      'page arguments' => array(1),
      'access arguments' => array('create correction content')
  );

  $items['question/confirm/%/%'] = array(
      'title' => 'Confirm attachment',
      'type' => MENU_CALLBACK,
      'page callback' => 'question_confirm_attachment',
      'page arguments' => array(2,3),
      'access arguments' => array('create correction content')
  );

  // Maybe only be available to the person who initially asked the question?
  $items['question/decouple/%/%'] = array(
      'title' => 'Decouple question-article connection',
      'type' => MENU_CALLBACK,
      'page callback' => 'question_decouple_connection',
      'page arguments' => array(2,3),
      'access arguments' => array('create correction content'));

  return $items;
}

// Once the article that contains the answer has been selected,
// we need to do something sensible.  In this case, what we do is
// add values to the relevant fields on the question node.
//
// Note: we'll also want to interactively populate the note field...
function question_confirm_attachment($nid_of_question,$nid_of_answer){
  global $user;
  $question_node = node_load($nid_of_question);
  // set the fulfiller id field to the current user id
  $question_node->field_question_fulfiller['und'][0]['uid'] = $user->uid;

  // needs a little work to get this to actually stay
  $nowtime=date('Y-m-d H:i:s');
  $question_node->field_question_closed['und'][0]['value'] = $nowtime;

  // set the relevant article field to the one indicated
  $question_node->field_question_article['und'][0]['nid'] = $nid_of_answer;
  // save our changes
  node_save($question_node);

  drupal_set_message('Article '.$nid_of_answer
		     .' is now attached to this question as the answer.'
		     .'<br><br>Do you want to '
		     .l("add a note to the reader?",'node/'.$nid_of_question.'/edit'));

  db_merge('question_has_answer')
    ->key(array('qid' =>$nid_of_question , 'aid' => $nid_of_answer))
    ->fields(array('qid' =>$nid_of_question , 'aid' => $nid_of_answer))
    ->execute();

  drupal_goto('node/'.$nid_of_question);
  // dpm($question_node);
}

function question_decouple_connection($nid_of_question,$nid_of_answer){
    $num_deleted = db_delete('question_has_answer')
            ->condition('aid', $nid_of_question)
            ->condition('pid',$nid_of_answer)
            ->execute();
    drupal_set_message('Answer '.$nid_of_answer.' is no longer connected with this question');
    drupal_goto('node/'.$nid_of_question);
}

// this isn't necessarily what we want, but for now it will give us
// the ability to attach *something*... and it might not be exactly wrong.
function question_get_all_articles(){
    $query = db_select('node', 'n')
          ->fields('n')
          ->condition('type','article','=')
          ->extend('PagerDefault')
          ->extend('TableSort')
          ->limit(20);
  $result = $query->execute();
  return $result;
}

// This just allows us to have a link like "node/ask/question/%" for
// asking questions The actual processing of $nid is done by
// question_form_question_node_form_alter
function question_attach_question($nid) {
  drupal_goto('node/add/question/'.$nid);
}

// This implementation will allow us to select an article that answers the question.
// It would be good to include an autocomplete field option so that people could just
// select the article by name (if they know the name).
function question_attach_answer($nid){
  global $base_url;

  $count=db_query("SELECT COUNT(nid) as count FROM node WHERE type = 'article'")
         ->fetchObject();

  if($count->count > 0) {
    $articles = question_get_all_articles();
    $header = array(array('data' => 'Title', 'field' => 'n.nid'),
		    array('data' => "Author", 'field' => 'n.title'),
		    array('data' => 'Attach', 'field' => 'Attach')
		    );
    $rows = array();
    foreach ($articles as $article) {
      $rows[] = array(
		      array('data' => l($article->title, 'node/' . $article->nid), 
			                'field' => 'n.title'),
		      array('data' => l(user_load($article->uid)->name, 
					'user/' . $article->uid), 'field' => 'n.author'),
		      array('data' => theme('attach_answer',
					    array('url'=>$base_url.'/questions/confirm/'
						                  .$nid.'/'
						                  .$article->nid)))
		      );
    }
    return l('Add a new article', 'node/add/article')
           . theme('table', array(
				  'header' => $header,
				  'rows' => $rows
				  ))
           . theme('pager');
  } else {
    drupal_set_message("Please go ahead and create a new article. "
		       . " It will be attached to article ".$nid."!");
    drupal_goto('node/add/article/'.$nid);
  }
}

function theme_attach_answer($variables){
  $output = l(
	      t('Attach as answer'),
	      $variables['url'],
	      array(
      
		    'attributes' => array(
					  'class' => "attach_question_icon",
					  'title' => t('Attach article as an answer'),
					  ))
	      );
  return $output;
}

function question_theme($existing, $type, $theme, $path){
  return array('attach_answer' => array(
					'variables' => array('url' => NULL,
							     'query' => NULL)
				      ),
  );
}

function question_authorlinks_assemble_article($node){
  $newlinks = array();
  if (isset($node->content['planetary_links'])) {
    $oldlinks = $node->content['planetary_links']['#links'];
    if (!empty($oldlinks)) {
      $newlinks = array_merge($oldlinks, question_add_links_article($node));
    } else {
      $newlinks = question_add_links_article($node);
    }
  } else {
    $newlinks = question_add_links_article($node);
  }
  return $newlinks;
}

function question_add_links_article($node){
  $links = array(
      'ask-question' => l('Ask a question', 'node/ask/question/' . $node->nid)
  );
  return $links;
}

function question_authorlinks_assemble_question($node){
  $newlinks = array();
  if (isset($node->content['planetary_links'])) {
    $oldlinks = $node->content['planetary_links']['#links'];
    if (!empty($oldlinks)) {
      $newlinks = array_merge($oldlinks, question_add_links_question($node));
    } else {
      $newlinks = question_add_links_question($node);
    }
  } else {
    $newlinks = question_add_links_question($node);
  }
  return $newlinks;
}

// This function and associated things it calls are out of date, supplanted by
// things in the attachable content module
function question_add_links_question($node) {
    $links = array(
		   'attach-answer' => l('Answer this question', 
					'questions/'. $node->nid .'/attach/')
		   );
    return $links;
}

// Not a bad idea to keep using the planetary_links
// mechanism introduced in other modules, since
// when we have an "interact box", that will get
// themed nicely
//
// So why doesn't the thing show up?
function question_node_view($node,$view_mode){
  if($view_mode!='content'){
    $mytype=$node->type;
    // For articles, we can ASK a question
    if($mytype == 'article'
       || $mytype == 'problem'
       || $mytype == 'collection'
       || $mytype == 'solution'){
      $newlinks = question_authorlinks_assemble_article($node);

      $node->content['planetary_links'] = array(
						'#markup' => '',
						'#weight' => 10,
						'#theme' => 'planetary_links',
						'#links' => $newlinks
						);
    }
  }
}
// We don't have to specially set a reference to the user who *submits*
// the question, since that's recorded for us by normal drupal "insert"
// routine.  However, we *will* have to record a reference to the user
// who *closes* the question.  That will have to follow a similar
// logic to what we do here (I think?), but done elsewhere (?).
//
function question_form_question_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if(isset($form['#node']->field_question_fulfiller['und'][0]['uid'])
     && $user->uid == $form['#node']->field_question_fulfiller['und'][0]['uid'] ){
    $userIsFulfiller = TRUE;
  } else {
    $userIsFulfiller = FALSE;
  }

  if(isset($form['#node']->field_question_context['und'][0]['nid'])) {
    $val = $form['#node']->field_question_context['und'][0]['nid'];
  } else {
    $val = arg(3); 
  } 
  $form['field_question_context']['und'][0]['nid']['#default_value'] = $val;

  if($val==NULL) {
    hide($form['field_question_context']);
  }
  
  $valb=NULL;
  // gotta deal with the target article now
  if(isset($form['#node']->field_question_article['und'][0]['nid'])) {
    $valb = $form['#node']->field_question_article['und'][0]['nid'];
  } 
  if($valb==NULL) {
    hide($form['field_question_article']);
  }

  // If the question isn't closed, then we don't want to see these
  // (Actually we might never want to see these on a *form*, since they
  // should be filled in *automatically* when the question is answered...
  // feature to be added of course!)
  if(!isset($form['#node']->field_question_closed['und'][0]['value'])) {

    $form['field_question_closed']['und'][0]['#value']['value'] =
      array(
            'month' => NULL,
            'day' => NULL,
            'year' => NULL,
            'hour' => NULL,
            'minute' => NULL,
        );
    
  }
  $default_submit=$form['#submit'];
  $form['#submit'] = array_merge(array('question_additional_submit_handler'),$default_submit);

  // The fulfiller should really only be able to edit the note, but I
  // guess we can allow them to edit the title as well...
  if($userIsFulfiller){
    hide($form['field_question_latex']);
    hide($form['field_question_type']);
  } else {
    // The asker won't be able to edit the note
    hide($form['field_question_note']);
  }
  hide($form['field_question_fulfiller']);

  // Unless this is un-hidden, this gives an error when going to re-edit the article
  // -- however, we want it to be hidden, so the best solution is probably to hide it with
  // Javascript...
  // hide($form['field_question_closed']);
  $path = drupal_get_path('theme','planetmath');
  drupal_add_js("$path/js/theme_question_node.js");
}

function question_additional_submit_handler(&$form, &$form_state) {

  // If the user deletes the reference to the article that contains
  // the answer, then the fulfilled time goes away and the question is
  // open again
  if(!isset($form['#node']->field_question_article['und'][0]['nid'])
    ||!$form['#node']->field_question_article['und'][0]['nid']){
    //dd("zap");
    //dpm($form_state);
    $form_state['values']['field_question_fulfiller']['und'][0]['uid'] = NULL;
    $form_state['values']['field_question_closed']['und'][0]['value'] = NULL;
    $form_state['values']['field_question_closed']['und'][0]['value2'] = NULL;
    $form_state['values']['field_question_closed']['und'][0]['timezone'] = NULL;
    //dpm($form_state);
  }
}

function question_node_insert($node){
  if($node->type == 'question'){
    if(isset($node->field_question_context) && isset($node->field_question_context['und'][0]['nid']))
      {
	db_merge('question_has_context')
	  ->key(array('qid' =>$node->nid,
		      'cid' => $node->field_question_context['und'][0]['nid']))
	  ->fields(array('qid' =>$node->nid,
			 'cid' => $node->field_question_context['und'][0]['nid']))
	  ->execute();
      }
  }
}

/* Adding a block so that questions will show up in context... 
 * - Here, $nid is our "context".
 */

function question_unanswered_block($nid) {
  $node = node_load($nid);

  // Select questions
  $results = db_query("SELECT * FROM question_has_context WHERE question_has_context.cid = :nid AND NOT EXISTS (SELECT 1 from question_has_answer WHERE question_has_answer.qid = question_has_context.qid)",
		      array(':nid' => $nid));

  $html = '<ul> ';
      foreach ($results as $result) {
	if($result->qid){
	  $interestingNode = node_load($result->qid);
	  $html .= '<li>'.l($interestingNode->title, 'node/' . $result->qid).' by '.l($interestingNode->name, 'user/' . $interestingNode->uid).'</li>';
	}
      }
  return array(
	       'subject' => 'Burning Questions',
	       'content' => $html
	       );
}

function question_countLinks($nid){
  $result = db_query("SELECT COUNT(*) AS cnt FROM question_has_context WHERE question_has_context.cid = :nid AND NOT EXISTS (SELECT 1 from question_has_answer WHERE question_has_answer.qid = question_has_context.qid)", array(':nid' => $nid))->fetchField();
  if ($result > 0){
    return TRUE;
  } else {
    return FALSE;
  }
}

function question_block_view($delta = '') {
  $block = array();

  if ($delta == 'unanswered') {
    $block = question_unanswered_block(arg(1));
  }

  return $block;
}
