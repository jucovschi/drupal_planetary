<?php

/* collections functionality (by Joe and Lucas)
 *
 * Collections are like "playlists" for math content
 * You can add ARTICLES, PROBLEMS, and other COLLECTIONS to a given collection
 * So, in this way they also provide a sort of ad hoc "books" functionality.
 * But the original intention is to create problem sets.
 *  - To this end, collections are displayed along with "personal metadata"
 *    or "paradata" which show the user's previous interaction with the content.
 *
 *  This module implements page view tracking, which adds "zero
 *  points" to a user's history when they view an article.  This NEEDS
 *  A PATCH TO THE USERPOINTS MODULE.  It should probably also be made
 *  "opt in", and maybe moved into a different module to make it more
 *  clear what's going on.
 *
 * TODO: 
 *  - Collections should be co-authorable or at least transferable to other users.
 *  - Allow other types of content to be included?  (E.g. images? solutions?)
 *  - Build a nice LaTeXML/LaTeX tool that pulls all of the content from a collection
 *    into one page or a printable PDF that can then be downloaded and used offline.
 *  - It would be convenient to be able to attach a PROBLEM SET, not just a problem,
 *    to an article.  (Add this to collection_user_add_links...)  (Indeed, maybe we
 *    should have one unified "Attach" mechanism that would deal with all of these
 *    different kinds of connections?
 */

function collection_menu() {
  $items = array();

  $items['collection/%/reorder'] = array(
    'title' => 'Reorder collection',
    'description' => 'Show a page with a sortable tabledrag form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('collection_form', 1),
    'access callback' => TRUE,
    // Do not name an includes file the same as your form name, as you may run
    // into 'undefined index in drupal_retrieve_form()' notices.
    'file' => 'collection.table.inc',
  );

  // This particular path will be pretty much superseded by the feature coming from 
  // planetmath_attachable_content
  $items['collection/%/attach'] = array(
    'title' => 'Attach content',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_attach_content',
    'page arguments' => array(1),
    'access arguments' => array('create correction content')
  );

  $items['collection/confirm/%/%'] = array(
    'title' => 'Confirm attachment',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_confirm_attachment',
    'page arguments' => array(2, 3), //'nid_of_article','nid_of_collection'),
    'access arguments' => array('create correction content')
  );

  $items['collection/remove/%/%'] = array(
    'title' => 'Confirm UNattachment',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_remove_attachment',
    'page arguments' => array(2, 3), //'nid_of_article','nid_of_collection'),
    'access arguments' => array('create correction content')
  );

  $items['collection/%/detach'] = array(
    'title' => 'Detach content from collection',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_detach_content',
    'page arguments' => array(1), //'nid_of_article','nid_of_collection'),
    'access arguments' => array('create correction content'));

  $items['collection/%/insert'] = array(
    'title' => 'Insert into a collection',
    'type' => MENU_CALLBACK,
    'page callback' => 'collection_insert_content',
    'page arguments' => array(1),
    'access arguments' => array('create correction content')
  );

  return $items;
}

/* This function allows the user to attach articles and problems to a collection.
 *  - TODO: it would be good to improve this presentation so that the *selection*
 *    could be filtered in a reasonable way, e.g. filtering by "my articles"
 *    or MSC or some other criteria.  Right now, the user has to choose from
 *    the entire collection of articles, which isn't particularly elegant or feasible.
 *    Compare issue #144 on Github.
 */
function collection_attach_content($nid) {
  global $base_url;

  $count = db_query("SELECT COUNT(nid) as count FROM node WHERE type IN ('article','problem','collection')")->fetchObject();

  //if we have items we could add...
  if ($count->count > 0) {

    //get all posible content that can be attached to this collection
    $all_articles_and_problems = _collection_getAllContent();

    //construct the header of the table
    $header = array(array('data' => 'Title', 'field' => 'n.nid'),
      array('data' => "Author", 'field' => 'n.title'),
      array('data' => 'Attach', 'field' => 'Attach')
    );

    // iterate over the content and construct the rows of the table 
    $rows = array();
    foreach ($all_articles_and_problems as $content_item) {
      $rows[] = array(
        array('data' => l($content_item->title, 'node/' . $content_item->nid),
	      'field' => 'n.title'),
        array('data' => l(user_load($content_item->uid)->name, 
                          'user/' . $content_item->uid), 
	      'field' => 'n.author'),
        array('data' => 
	      theme_attach_content_icon(
					array('type' => $content_item->type, 
					      'url' => $base_url . '/collection/confirm/'
                                                                 . $nid . '/'
                                                                 . $content_item->nid)))
		      );
    }

    return l('Add a new article', 'node/add/article')//on top of the table
        . " " . l('Add a new problem', 'node/add/problem')//on top of the table
        . theme('table', array(
          'header' => $header,
          'rows' => $rows
        ))
        . theme('pager'); //adds the pagination element in the bottom of the table
  }
  else {
    //in the (even possible?) occasion we do not have any content to list
    drupal_set_message("Sorry there is currently not a single element of content to add to a collection!" .
        "Yeap! Not even a single article... :( ");
    drupal_goto('/');
  }
}

function collection_detach_content($cid) {
  global $base_url;

  $count = db_query("SELECT COUNT(n.nid) as count ".
		    "FROM node n INNER JOIN collection_has_content chc ".
                    "ON (n.nid=chc.nid) ".
		    "WHERE chc.cid=:cid",
		    array(':cid'=>$cid))->fetchObject();

  // if we have items to remove
  if ($count->count > 0) {

    //get all content currently in this collection
    $my_articles_and_problems = _collection_getMyContent($cid);

    //construct the header of the table
    $header = array(array('data' => 'Title', 'field' => 'n.nid'),
      array('data' => "Author", 'field' => 'n.title'),
      array('data' => 'Unattach', 'field' => 'Unattach')
    );

    // iterate over the content and construct the rows of the table 
    $rows = array();
    foreach ($my_articles_and_problems as $content_item) {
      $rows[] = array(
        array('data' => l($content_item->title, 'node/' . $content_item->nid),
	      'field' => 'n.title'),
        array('data' => l(user_load($content_item->uid)->name, 
                          'user/' . $content_item->uid), 
	      'field' => 'n.author'),
        array('data' => 
	      theme_detach_content_icon(
					array('type' => $content_item->type, 
					      'url' => $base_url . '/collection/remove/'
                                                                 . $cid . '/'
                                                                 . $content_item->nid)))
		      );
    }

    return theme('table', array(
          'header' => $header,
          'rows' => $rows
        ))
        . theme('pager'); //adds the pagination element in the bottom of the table
  }
  else {
    //in the (even possible?) occasion we do not have any content to list
    drupal_set_message("Sorry there is currently not a single element of content in this collection!");
  }
}



// very similar to collection_attach_content, above
// but for this function, we start with an item and have to select
// a collection to add it to
//
// TODO/IMPROVEMENTS:
// - If there's only ONE viable collection, I suppose we could just insert into it
//   automatically?
// - Or, to generalize that, we could set a "default collection" so that people insert
//   things into their default collection directly, skipping the
//   "insert into a collection" menu.

function collection_insert_content($nid) {
  global $base_url;
  global $user;

  // if there is some collection available for us to use?
  // ... we won't allow people to insert the collection into itself, sorry Mr Russell
  // TODO -  we really shouldn't allow people to insert into collections
  // that already *include* the item once (in my opinion)... we can deal with that
  // via a subquery.  However, maybe we'll come back to that after we have the ability
  // to add content to collections directly.
  
  $count = db_query("SELECT COUNT(nid) as count FROM node ".
		    "WHERE type = 'collection' ".
		    "AND uid = :uid ".
		    "AND nid <> :nid", array(':uid'=>$user->uid,
					     ':nid'=>$nid))->fetchObject();
  if ($count->count > 0) {
    // get all possible collections that the user might have in mind.
    // we filter out the $nid (which is safe to do even if the $nid
    // does not correspond to a collection, because of course in that case
    // it is filtered out anyway)
    $all_collections = _collection_getAllCollections($nid);

    //construct the header of the table
    $header = array(array('data' => 'Title', 'field' => 'n.nid'),
                    array('data' => 'Attach', 'field' => 'Insert into')
		    );

    // iterate over the content and construct the rows of the table 
    $rows = array();
    foreach ($all_collections as $content_item) {
      $rows[] = array(
        array('data' => l($content_item->title, 'node/' . $content_item->nid),
	      'field' => 'n.title'),
        array('data' => 
	      theme_insert_content_icon(
					// NEED TO FIX THIS LINK!...
					// Or maybe not, I guess it works directly...
					// OH I see, it just needs to be reversed...
					array('type' => $content_item->type, 
					      'url' => $base_url . '/collection/confirm/'
                                                                 . $content_item->nid
					                         . '/'
                                                                 . $nid)))
		      );
    }

    // message on top of the table
    return l('Add a new collection', 'node/add/collection')
        . theme('table', array(
			       'header' => $header,
			       'rows' => $rows
			       ))
        . theme('pager'); //adds the pagination element in the bottom of the table
  }
  else {
    // Create a collection and add the node, see implementation of
    // hook_node_insert below for the relevant trick
    drupal_set_message("Please create your first collection, and the node will be added automatically!");
    drupal_goto('node/add/collection/'.$nid);
  }
}

/*
 * helper function to return all articles and problems of the site
 * to be displayed in attach to collection list
 */

function _collection_getAllContent() {
  $query = db_select('node', 'n')
      ->fields('n')
      ->condition('type', array('article', 'problem'), 'IN')
      ->extend('PagerDefault')
      ->extend('TableSort')
      ->limit(20);
  $result = $query->execute();
  return $result;
}

function _collection_getMyContent ($cid) {
  $result=array();
  $contents = db_query('SELECT n.nid as nid, n.title as title, n.type as type, n.uid, rank as weight '.
      'FROM node n INNER JOIN collection_has_content chc ON (n.nid=chc.nid) '.
      'WHERE chc.cid=:cid ORDER BY rank ASC',
      array(':cid'=>$cid));
  foreach ($contents as $content) {
    $result[] = $content;
  }
  return $result;
}

/*
 * helper function to return all articles and problems of the site
 * to be displayed in attach to collection list
 */

function _collection_getAllCollections($nid) {
  $query = db_select('node', 'n')
      ->fields('n')
      ->condition('type', 'collection', '=')
      ->condition('nid', $nid, '<>')
      ->extend('PagerDefault')
      ->extend('TableSort')
      ->limit(20);
  $result = $query->execute();
  return $result;
}

//the way markup is created for attach link in the table
function theme_attach_content_icon($variables) {
  $output = l(
      t('Attach'), $variables['url'], array(
    'attributes' => array(
      'class' => "attach_content_icon",
      'title' => t('Attach this ' . $variables['type'] . ' to this collection'),
      ))
  );
  return $output;
}

function theme_detach_content_icon($variables) {
  $output = l(
      t('remove'), $variables['url'], array(
    'attributes' => array(
      'class' => "remove_content_icon",
      'title' => t('remove this ' . $variables['type'] . ' from this collection'),
      ))
  );
  return $output;
}

//the way markup is created for attach link in the table
function theme_insert_content_icon($variables) {
  $output = l(
      t('Add to'), $variables['url'], array(
    'attributes' => array(
      'class' => "insert_content_icon",
      'title' => t('Insert this into to this collection'),
      ))
  );
  return $output;
}

/* Implements hook_node_insert
 * - Allow an extra value to be passed in, if it is present,
 *   that's a node to add to the collection
 */
function collection_node_insert($node){
  if($node->type=='collection'){
    $val = arg(3); 
    // we're intending to add a node directly to this collection
    if($val!=""){
      // Note, this doesn't do any typechecking, so provides a
      // "loophole" whereby any node can be added to a collection....
      collection_confirm_attachment($node->nid,$val);
    }
  }
}

function collection_confirm_attachment($collection_id, $content_id) {

  $count = db_query("SELECT COUNT(*) as count FROM collection_has_content WHERE cid=$collection_id")->fetchObject();

  $how_many = $count->count + 1;

  db_merge('collection_has_content')
      ->key(array('cid' => $collection_id, 'nid' => $content_id))
      ->fields(array('cid' => $collection_id, 'nid' => $content_id, 'rank' => $how_many))
      ->execute();

  $content = node_load($content_id);
  drupal_set_message('The ' . $content->type . ' has been added to this collection');
  drupal_goto('node/' . $collection_id);
}

/* Similar to collection_confirm_attachment above, 
 * except it does the reverse operation!
 */
function collection_remove_attachment($collection_id, $content_id) {

  db_delete('collection_has_content')
    ->condition('cid', $collection_id)
    ->condition('nid', $content_id)
    ->execute();

  $content = node_load($content_id);
  drupal_set_message('That ' . $content->type . 
		     ' has been removed from this collection');
  drupal_goto('node/' . $collection_id);
}

/* Add some links FOR THE COLLECTION OWNER.
 *
 * - Also: It would be good to have a "remove item" link, or make
 *         the existing link into "add/remove" and provide that functionality
 *
 * NB: we only show the "reorder" link if there's more than one entry. */

function collection_add_links($node, $rows){
  global $user;

  $links = array();

  if (count($rows) > 0) {
    $links[] = l("Drop from this collection", 
		 'collection/' . $node->nid . '/detach');
  }
  if (count($rows) > 1) {
    $links[] = l("Reorder this collection", 
		 'collection/' . $node->nid . '/reorder');
  }

  return $links;
}

function collection_user_add_links($node){
  global $user;

  $links = array();

  // The link to add the collection to another collection
  // should really only appear IF THERE IS SOME OTHER VALID COLLECTION to add to!
  // Luckily, we can just figure that out.
  //
  // Actually, that logic seems wrong.  The user should be able to make
  // an initial collection on the fly.

  /* $countOtherCollections = db_query("SELECT COUNT(nid) as count FROM node ".
		    "WHERE type = 'collection' ".
		    "AND uid = :uid ".
		    "AND nid <> :nid", array(':uid'=>$user->uid,
		    ':nid'=>$node->nid))->fetchObject(); 
   */

  //  if ($countOtherCollections->count > 0) {
  //  $str = '';

    if($node->type=='collection'){
      $str = "Add this collection to another collection";
    } else {
      $str = "Add to collection";
    }
    $links[] = l($str, 
      'collection/' . $node->nid . '/insert');

  // }

  return $links;
}

/* implements hook_node_view
 *  Ceiling cat is watching you read math articles
 *
 * - Deals with presenting collections
 * - Also deals with tracking user reading behavior, assuming we want to do that
 * - Also provides links for the "Interact" block for various kinds of nodes
 *   (including collections of course!)
 */
function collection_node_view($node, $view_mode){
  if($view_mode!='content'){
  global $user;
 
  // assuming we're looking at a *collection*
  if ($node->type == 'collection') {
    // First build the table, which is the main thing...
    $contents_of_this_collection = db_query("SELECT n.* from node n ".
					    "INNER JOIN collection_has_content chc ".
					    "ON (n.nid = chc.nid) ".
					    "WHERE chc.cid=:col_id ".
					    "ORDER BY rank ASC",
					    array(':col_id' => $node->nid));

    //construct the header of the table
    $header = array(
		    array('data' => 'Title', 'field' => 'n.nid'),
		    array('data' => "Author", 'field' => 'n.title'),
		    array('data' => "My info", 'field' => 'paradata'),
		    );

    // iterate over this content and construct the rows of the table
    // "Paradata" is only meaningful if the user is logged in
    // so we check that before we do anything else
    $rows = array();
    foreach ($contents_of_this_collection as $content_item) {
      $paradataColumn = "";
      if (user_is_logged_in()){
	/* items in the collection can either a PROBLEM or an ARTICLE,
           for problems, we will record whether or not the user has
	   submitted a solution... */
	if ($content_item->type=='problem') {
	  // we will find out if the current user has
	  // submitted any solutions to this problem
          $countSql = "select COUNT(*) as count from problem_has_solution phs ".
                      "INNER JOIN node n ON (phs.sid=n.nid) ".
                      "WHERE pid=:pid AND n.uid=:uid";
          $numSoln = db_query($countSql,array(':pid'=>$content_item->nid,
                                              ':uid'=>$user->uid))->fetchObject();
	    if ($numSoln->count>0){
	      // just include a count of the number submitted for now
	      // we could e.g. link to the most recent as well, and even
	      // more interestingly, some information about the mark(s)
	      // that these solutions received...
	      $paradataColumn .= "Submitted (".$numSoln->count.")";
	    } else {
	      $paradataColumn .= l("Submit a solution",
				   'node/add/solution/'.$content_item->nid);
	    }
	} /* end of element-is-problem case */

	/* we get paradata for articles by showing whether the article in question
	   has been read... NB. to work properly, THIS REQUIRES A PATCH TO THE
	   USERPOINTS MODULE, need to get that sorted out -- and ideally make the
           corresponding logging "opt-in". */

	else if ($content_item->type=='article') {
	  $sql = "select count(*) AS count from userpoints_txn ".
	    "WHERE uid=:uid AND entity_id=:nid AND points=0";
	  $article_read = db_query($sql,array(':nid'=>$content_item->nid,
					      ':uid'=>$user->uid))->fetchObject();

	  if ($article_read->count>0) {
	    $paradataColumn .= "article read already";
	  } else {
	    $paradataColumn .= "not yet read";
	  }
	}  /* end of element-is-article case */

	// This isn't real "para-"data, but we could later move proper paradata
	// in, e.g. by finding the "percentage complete" for a given list of problems.
	// TODO: deal with this later!
	else if ($content_item->type=='collection') {
          $countSql = "SELECT COUNT(*) as count from node n ".
	              "INNER JOIN collection_has_content chc ".
	              "ON (n.nid = chc.nid) WHERE chc.cid=:col_id";
          $numElements = db_query($countSql,
				  array(':col_id'=>$content_item->nid))->fetchObject();

	  $paradataColumn .= $numElements->count." elements";

	} /* end of element-is-collection case */
      } /* End of "user logged in" case*/ 
      else 
	{
	  $paradataColumn = "User not logged in";
	}
      
      // Put all of that together...
      $rows[] = array(
		      array('data' => l($content_item->title, 
					'node/' . $content_item->nid),
			    'field' => 'n.title'),
		      array('data' => l(user_load($content_item->uid)->name, 
					'user/' . $content_item->uid),
			    'field' => 'n.author'),
		      array('data' => $paradataColumn,
			    'field' => 'paradata'),
		      );
    }
    // Now we theme the table we built.
    // (Note: this only makes sense when there's more than zero rows.)
    if (count($rows) > 0) {
      // We will add a pagination element at the bottom of the table,
      // Which is only useful if there's a lot of content of course!
      $html = theme('table', array(
				   'header' => $header,
				   'rows' => $rows
				   ))
	. theme('pager'); 

      // the collections_contents_table will be picked up by the template 
      $node->content['collection_contents_table'] = array(
							  '#markup' => $html,
							  );
    } /* Done building the table*/
   
    // Now add some links for the OWNER (only) to interact with this collection.
    // (Some additional interactions could be added for other people later.)
    if ($user->uid == $node->uid) {
      if (isset($node->content['planetary_links'])) {
	$oldlinks = $node->content['planetary_links']['#links'];
	if (!empty($oldlinks)) {
	  $newlinks = array_merge($oldlinks, collection_add_links($node, $rows));
	} else {
	  $newlinks = collection_add_links($node, $rows);
	  //  dd($newlinks,"NEW - inner ");
	}
      } else {
	$newlinks = collection_add_links($node, $rows);
      }

      // make use of the dependency on planetmath_attachable_content
      $newlinks = array_merge(planetmath_attachable_content_add_links($node),$newlinks);

      $node->content['planetary_links'] = array(
						'#markup' => '',
						'#weight' => 10,
						'#theme' => 'planetary_links',
						'#links' => $newlinks
						);
    }
  }  /* End of "view a collection" case */

  /* tweaks for other kinds of nodes follow... */
  
  /* implement page view tracking using the userpoints API */
  if(user_is_logged_in() && $node->type=='article'){
    // dd("ABOUT TO ADD POINTS");
    $points_params = array('uid' => $user->uid,
			   'points' => 0,
			   'moderate' => FALSE,
			   'operation' => 'viewed',
			   'display' => TRUE,
			   // there must be a way to make this show up as a link...?
			   // look in the userpoints.pages.inc
			   'description' => $node->title.' viewed',
			   'entity_id' => $node->nid,
			   'entity_type' => 'node'
			   );
    userpoints_userpointsapi($points_params);
  }

  /* Code to add links for non-owner logged in users (on various types of nodes) */
  if(user_is_logged_in() && ($node->type=='article'
			     || $node->type=='problem'
			     || $node->type=='collection')){

    if (isset($node->content['planetary_links'])) {
      $oldlinks = $node->content['planetary_links']['#links'];
      if (!empty($oldlinks)) {
	$newlinks = array_merge($oldlinks, collection_user_add_links($node));
      } else {
	$newlinks = collection_user_add_links($node);
	//  dd($newlinks,"NEW - inner ");
      }
    } else {
	$newlinks = collection_user_add_links($node);
	// dd("USERLINKS");
	// dd($newlinks);
    }
      $node->content['planetary_links'] = array(
						'#markup' => '',
						'#weight' => 10,
						'#theme' => 'planetary_links',
						'#links' => $newlinks
						);
    }
  }
}

function collection_theme($existing, $type, $theme, $path) {
  $to_return = array(
    'collection_form' => array(
      'render element' => 'form',
      'file' => 'collection.table.inc',
    ),
    'collection_contents' => array(
      'variables' => array('links' => array()),
    ),
      //'collection_contents_table' => array(),    
  );
  return $to_return;
}

function theme_collection_contents($variables) {
  //dd('in the theme of articles of this collection');
  $return = "";
  foreach ($variables['links'] as $link) {
    $return = $return . l($link->title, 'node/' . $link->nid) . " ";
  }
  return $return;
}


/* Adding a block so that collections will show up in context... 
 * - Here, $nid is our "context".
 */

function collection_incollection_block($nid) {
  $node = node_load($nid);

  // Select collections that have the given article as a piece of content.
  $results = db_query("SELECT * FROM collection_has_content WHERE collection_has_content.nid = :nid",
		      array(':nid' => $nid));

  $html = '<ul> ';
  $count=0;
  foreach ($results as $result) {
    $count=$count+1;
    if($result->cid){
      $interestingNode = node_load($result->cid);
      $html .= '<li>'.l($interestingNode->title, 'node/' . $result->cid).' by '.l($interestingNode->name, 'user/' . $interestingNode->uid).'</li>';
    }
  }
  
  if($count>1){
    $subject='In Collections';
  } else {
    $subject='In Collection';
  }
  return array(
	       // Put this in the singular if there's only one...
	       'subject' => $subject,
	       'content' => $html
	       );
}

function collection_countLinks($nid){
  $result = db_query("SELECT COUNT(*) AS cnt FROM collection_has_content WHERE collection_has_content.nid = :nid", array(':nid' => $nid))->fetchField();
  if ($result > 0){
    return TRUE;
  } else {
    return FALSE;
  }
}

function collection_block_view($delta = '') {
  $block = array();

  if ($delta == 'incollection') {
    $block = collection_incollection_block(arg(1));
  }

  return $block;
}
