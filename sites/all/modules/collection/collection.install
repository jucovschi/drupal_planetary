<?php

function collection_install() {
  // get the translation function relevant to our current localisation
  $t = get_t();
  // define the content type as an array (same as in hook_node_info())
  $collection = array(
              'type' => 'collection',
              'name' => 'Collection',
              'base' => 'node_content',
              'module' => 'node',
              'description' => t(''),
              'has_title' => 1,
              'custom' => false,
              'modified' => false,
              'locked' => 1,
              'disabled' => 0,
	      'promote' => 0,
	      'status' => 1,
	      'comment' => 0,
              'orig_type' => 'collection'
  );

  // set default values for anything not explicitly defined in the above array
  $content_type = node_type_set_defaults($collection);

  // add the body field to the content type - actually we don't want this here
  node_add_body_field($content_type, 'Description (content will be added separately)');

  // create the content type
  node_type_save($content_type);
  node_types_rebuild();
  menu_rebuild();

  // Adding a block to show the collections that a given node is in
  // (Note: we can use the existing table collection_has_content to
  // figure out what's where!)
  $block = array('module' => 'collection',
		 'delta' => 'incollection',
		 'theme' => variable_get('theme_default'),
		 'status' => 1,
		 'weight' => -29,
		 'region' => 'sidebar_second',
		 'visibility' => 2,
		 'pages' => '<?php 
if(drupal_is_front_page()){
  return false;
}
if(arg(0) == "node"){
 return collection_countLinks(arg(1));
}
return false;
?>',
		 'cache' => 1,
		 );

  db_merge('block')
    ->key(array('module'=>$block['module'],
		'theme'=>$block['theme'],
		'delta' => $block['delta']))
    ->fields(array('module'=> $block['module'],
		   'theme' => $block['theme'],
		   'delta' => $block['delta'],
		   'status' => $block['status'],
		   'weight' => $block['weight'],
		   'region' => $block['region'],
		   'visibility' => $block['visibility'],
		   'pages' => $block['pages'],
		   'cache' => $block['cache']))
    ->execute();

}


function collection_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'collection'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  
  
  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);


  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_problem_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('collection');

  // Purge all field information
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

function collection_schema() {
  $schema = array();

  $schema['collection_has_content'] = array(
      'description' => 'Connection table between collections and content nodes',
      'fields' => array(
          'cid' => array(
              'type' => 'int',
              'unsigned' => true,
              'not null' => true,
              'description' => 'Collection node Id'
          ),
          'nid' => array(
              'type' => 'int',
              'unsigned' => true,
              'not null' => true,
              'description' => 'Content node Id'
          ),
	  'rank' => array(
	    'type' => 'int',
            'unsigned' => false,
            'not null' => true,
            'description' => 'The ordered rank in which to display this content in collection'
        )
      ),
      'primary key' => array('cid', 'nid', 'rank')
  );

  return $schema;
}