<?php
/*
 * @file
 * 
 * I can use apachesolr_views to create a view based on search results.
 * But I need some custom code to tweak the output so it looks better and does
 * some useful stuff!
 *
 * PARTICULARS ON THE IMPLEMENTATION STRATEGY
 *
 * We put the view into a block that is set up to appear on paths attach/*
 * The block is defined in planetmath_attachable_content.install.
 *
 * This block will contain a view, created using apachesolr_views, and defined in
 * planetmath_attachable_content.views_default.inc
 *
 * The theming stuff for the block is in 
 *   block--views--acv_attachable_content_block.tpl.php
 * This is just done to get rid of the title.
 *
 * TODO
 * - It would be cool to use AJAX to do the attachment so that we can add multiple
 *   attachments (whenever this is a meaningful thing to do).
 *   - but for now it's just necessary to get the attachment operation working whatsoever...
 *
 * - It would be cool to get the search prepopulated with the title of the target node
 *
 * - It would be good to have an alternative attaching method that just autocompletes
 *   on the (known) name of the article: that should be fairly simple to add!
 */

function planetmath_attachable_content_menu() {
  $items = array();
  $items['attach/%'] = array(
      'title' => 'Attach content',
      'type' => MENU_CALLBACK,
      'page callback' => 'planetmath_attachable_content_attach',
      'page arguments' => array(1),
      'access arguments' => array('create correction content')
  );

  $items['attach/autocomplete'] = array(
    'title' => 'Article selector (result)',
    'page callback' => 'planetmath_attachable_content_article_selector_result',
    'access arguments' => array('create correction content'),
    'type' => MENU_CALLBACK
  );

  // Here we seem to need some general attachment confirmation router...
  $items['attach/confirm/%/%'] = array(
      'title' => 'Confirm attachment',
      'type' => MENU_CALLBACK,
      'page callback' => 'planetmath_attachable_content_confirm_attachment',
      'page arguments' => array(2,3),
      'access arguments' => array('create correction content')
  );

  return $items;
}

// Ah, we can always grab the current URL and do something with that.
function planetmath_attachable_content_preprocess_views_view_table(&$vars){
  global $base_url;

  if($vars['view']->name == 'acv'){

  // I think this should actually be arg(2) or arg(3)...?
  $myarg = substr(current_path(),7);
  $mybase = node_load($myarg);

  // Different modules can respond differently to the "attachment" action
  // -- hook in to that here.
  if($mybase->type=='collection'){
    $mypath = "/collection/confirm/";
  } else if ($mybase->type=='question'){
    $mypath = "/question/confirm/";
  } else if ($mybase->type=='group'){
    $mypath = "/group/confirm/";
  } else{
    $mypath = "/attach/confirm/";
  }

    //dd(array_keys($vars));
    //dpm($vars);
    $newrows=array();
    $extraclasses=array();
    $extraattributes=array();
    if( is_array( $newrows )){
      foreach( $vars['rows'] as $dataRow){
	$mynode=node_load($dataRow['entity_id']);
	$newrows[] = array('url'=>l($mynode->title,"node/".$dataRow['entity_id']),
			   'entity_id'=>user_load($mynode->uid)->name,
			   'foo'=>l("Attach", 
				    $base_url.
				    $mypath.
				    $myarg . "/" . $dataRow['entity_id']));
	$extraclasses[] = "views-field views-field-foo";
	$extraattributes[] = array();
        }
    }
    $vars['rows']=$newrows;
    $vars['classes_array']=array('views-table','cols-3');
    $vars['fields']= array('url'=>'url',
			   'entity_id'=>'entity_id',
			   'foo'=>'foo');
    $vars['field_classes']= array('url'=>$vars['field_classes']['url'],
				  'entity_id'=>$vars['field_classes']['entity_id'],
				  'foo'=>$extraclasses);
    $vars['field_attributes']= array('url'=>$vars['field_attributes']['url'],
				     'entity_id'=>$vars['field_attributes']['entity_id'],
				     'foo'=>$extraattributes);
    $vars['header'] = array();
    //dpm($vars);
  }
}

/* "Coming back to attach it later" is a pain.  It would be much nicer to
   have a node/add/article/NID path that will add the article, AND set it up
   as the answer to the question NID.*/
function planetmath_attachable_content_attach($nid){
  return '';
}

function planetmath_attachable_content_node_insert($node){
  //dd(arg(3));
  //dd(arg(4));
  if($node->type == 'article' && arg(3) == 'attach') {
  drupal_goto('attach/confirm/'.arg(4).'/'.$node->nid);
  }
}

/* Implements hook_views_api
 * This is needed to get our custom view working
 * See planetmath_blocks.views.inc for details
 */
function planetmath_attachable_content_views_api() {
  return array(
	       'api' => 3, 
	       'path' => drupal_get_path('module', 'planetmath_attachable_content'), 
	       );
}

/* Add some links for the relevant node types */

function planetmath_attachable_content_authorlinks_assemble($node){
  $newlinks = array();
  if (isset($node->content['planetary_links'])) {
    $oldlinks = $node->content['planetary_links']['#links'];
    if (!empty($oldlinks)) {
      // Since "Add" is an important interaction, we put it at the front of the list
      $newlinks = array_merge(planetmath_attachable_content_add_links($node),$oldlinks);
    } else {
      $newlinks = planetmath_attachable_content_add_links($node);
    }
  } else {
    $newlinks = planetmath_attachable_content_add_links($node);
  }
  return $newlinks;
}

// TODO: Actually, some of these interactions are only meaningful
// if the user has permission.  So, how do we check whether
// the user does or does not have permission to add to a given collection 
// or group?
function planetmath_attachable_content_add_links($node) {

  $link_string = '';
  $links=array();

  if($node->type == 'question'){
    $link_string = "Answer this question!";
  } else if ($node->type == 'collection') {
    $link_string = "Add to this collection!";
  } else if ($node->type == 'group' && $node->field_group_subtype['und'][0]['value']=='Team') {
    $link_string = "Add content to this group!";
  }

  if($link_string){
    $links = array(
		   'attach-something' => l($link_string, 
					'attach/'. $node->nid)
		   );
  }
    return $links;
}

// show the "attach" link on *collections*, *groups*, and *unanswered questions*.
function planetmath_attachable_content_node_view($node, $view_mode){
  if($view_mode!='content'){
  if( ($node->type == 'question' 
        && !isset($node->field_question_closed['und'][0]['value']))
    ||$node->type == 'collection'
    ||$node->type == 'group') {

      $newlinks = planetmath_attachable_content_authorlinks_assemble($node);

      $node->content['planetary_links'] = array(
						'#markup' => '',
						'#weight' => 10,
						'#theme' => 'planetary_links',
						'#links' => $newlinks
						);
  }
  }
}

// illustrates use of "render" to add a form into a block.
function planetmath_attachable_content_block_view_alter(&$data,$block) {
  if($block->delta=='acv-attachable_content_block'){
    $nid = arg(1);
    $mynode=node_load($nid);
    $form = drupal_get_form('planetmath_attachable_content_article_selector');
    $data['content']['#markup'] = "Enter search terms into the first box above and hit \"Apply\" to find matching items.  Once you've found what you're looking for, click \"Attach\"!".$data['content']['#markup'];
    if($mynode->type=='question')
      {
	$note = "The way question answering works around here is that answers are found in encyclopedia articles!  If you can't find an existing article that answers the question using the tools below, you can ".l("create one",'node/add/article/attach/'.$nid).", and it will be automatically attached as the answer when it's saved.<br><br>";
	$data['content']['#markup'] = $note.$data['content']['#markup'];
      }
    $data['content']['#markup'] .= "<br>Alternatively, search by title, and click \"Submit\" to attach that article:<br>" . render($form);
  }
}

function planetmath_attachable_content_article_selector($form, &$form_state) {   
  $form = array();

  $form_state['storage']['target'] = arg(1);

  $form['auto'] = array(
			'#type' => 'textfield',
			'#autocomplete_path' => 'attach/autocomplete'
			);

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Submit'));


  return $form;
}

// Actually, this drupal_goto may have to be a different path, depending on
// the type of the node that was submitted.
function planetmath_attachable_content_article_selector_submit ($form, &$form_state){
  $recipient=$form_state['storage']['target'];
  $auto=$form['auto']['#value'];

  $result=db_query("SELECT nid FROM node WHERE title=:title AND type='article'",
		   array(':title' => $auto))->fetchObject();

  drupal_goto('attach/confirm/'.$recipient.'/'.$result->nid);
}

function planetmath_attachable_content_article_selector_result($string = '') {
  $matches = array();
  if ($string) {
    $result =
      db_query_range("SELECT title FROM node WHERE LOWER(title) LIKE LOWER('$string%') AND type = 'article'", 0, 10); // only 10 results will show
    foreach ($result as $match) {
      $matches[$match->title] = check_plain($match->title);
    }
  }
  drupal_json_output($matches); //Returns the data in JSON format
}

function planetmath_attachable_content_confirm_attachment ($nid_of_recipient,$nid_of_target) {
  $mybase = node_load($nid_of_recipient);

  // Different modules can respond differently to the "attachment" action
  // -- hook in to that here.
  if($mybase->type=='collection'){
    collection_confirm_attachment($nid_of_recipient,$nid_of_target);
  } else if ($mybase->type=='question'){
    question_confirm_attachment($nid_of_recipient,$nid_of_target);
  } else if ($mybase->type=='group'){
    planetmath_og_attach_confirm($nid_of_recipient,$nid_of_target);
  } else{
    drupal_set_message("Something went wrong.");
  }
}