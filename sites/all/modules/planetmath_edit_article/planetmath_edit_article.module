<?php
/*
 * @file
 *
 * Provide a form-based UI to editors, and update contents of the
 * preamble accordingly (actually, we will update a field called
 * "metadata", which becomes part of the preamble when the code is
 * processed -- but this field is hidden from the user, since it is
 * maintained by Drupal based on the fields).
 *
 * This module is also responsible for other maintenance tasks, like
 * keeping the Canonical Name for the article unique.
 *
 * Later, we may write some code that will update the metadata fields
 * through e.g. SVN or Git, so that people can upload files from their
 * own archive.  The LaTeX metadata code will be useful for downstream
 * users who are interested in doing things on paper.
 *
 */

/*
 * STEP 1.  Add some extra fields to the "edit node" page. 
 * (We do this from the site's UI for now, see the article_setup feature.)
 */

/*
 * STEP 2. Programmatically stick some values into the metadata
 * preamble upon "save".
 */




function planetmath_edit_article_node_insert($node) {
  if ($node->type==='article'){
    $now = date('o-m-d G:i:s');
    $node->field_timecreated['und'][0]['value'] = $now;
  }
}

/* 
 * Implements hook_node_presave
 *
 * There's was problem with this code - it used to use the node's NID --
 * but NID isn't defined for new nodes during presave.  Sticking
 * the NID-using parts into  hook_node_update instead (see below)
 */

function planetmath_edit_article_node_presave($node) {
  if(is_object($node) 
     && isset($node->original)
     && is_object($node->original)
     && is_numeric($node->original->log)) {
    $node->log = $node->original->log+1;
  } else {
    $node->log = 1;
  }
  if ($node->type==='article'){

    // 1 - we UPDATE the canonical name
    $newname = planetmath_edit_article_canonicalize_name($node, $node->title);
    // if the canonical name is set...
    if ( $node->field_canonicalname['und'][0]['value'] ) {
      // AND the newname is different
      if (!($newname === $node->field_canonicalname['und'][0]['value'])) {
	// assign the newname
	$node->field_canonicalname['und'][0]['value'] = $newname;
      }}
    // otherwise, the canonical name is not set for some reason,
    // and we assign the brand new newname
    else {
	$node->field_canonicalname['und'][0]['value'] = $newname;
      }

    // 3 - we will update the metadata depending on what we know about the article
    planetmath_edit_article_process_metadata($node);
  }
}

function planetmath_edit_article_node_update($node){
  if ($node->type==='article'){
    //NOTE: it is important to set 'language' here, otherwise, your aliases
    //come back with an extra "-0" attached to them -- which is rather confusing!
    $path= array('source' => 'node/'.$node->nid,
		 'alias' => $node->field_canonicalname['und'][0]['value'],
		 'language' => '');

    path_save($path);
  }
}

function planetmath_edit_article_process_metadata($node){
  // The following debugging message shows how to access the metadata field.
  //dd("Node defines metadata: ".$node->field_latex['und'][0]['metadata']);

  /* Putting in this conditional to see if this makes the importing
     routine go better.  Metadata processing seems fine in normal use,
     but we get all kinds of warning messages at import time... */
  if(isset($node->field_latex)){
  $metadata = $node->field_latex['und'][0]['metadata'];
  $now = date('o-m-d G:i:s');
  $metadata =  "\\pmcanonicalname{".$node->field_canonicalname['und'][0]['value']."}\n";

  // time created is in the field time_created which is set by the
  // node_insert hook when the node is created

  // but we put a tiny piece of code here in case we are dealing with
  // pre-existing nodes where this field is not set

  $time_created = $now;
  if (isset($node->filed_timecreated['und'][0]['value'])){
    $time_created = $node->filed_timecreated['und'][0]['value'];
  }
	
  $metadata .= "\\pmcreated{".$time_created."}\n";
  $metadata .= "\\pmmodified{".$now."}\n";

  global $user;
  // This will get mapped to dct:creator, which isn't quite right but what's better?
  $metadata .= "\\pmowner{".$node->name."}{".$node->uid."}\n";
  // Currently active user is the "modifier", clearly
  $metadata .= "\\pmmodifier{".$user->name."}{".$user->uid."}\n";
  // Title is the LaTeX source for the title
  $metadata .= "\\pmtitle{".$node->title."}\n";
  // this will have to change when we have a proper versioning system in place
  // QUESTION: How do we get the real version number? - 
  // HINT: it's set earlier on in this file :)
  // (so, that's sorted.)
  $metadata .= "\\pmrecord{".$node->log."}{".$node->nid."}\n";
  // jac, Nov 27, 2012 - I need to add this so we can extract it later
  $metadata .= "\\pmprivacy{".$node->field_published['und'][0]['value']."}\n";

  // TODO: We should loop over the authors defined by OG and add each one
  // (assuming there's more than one)...  So, how do we get that stuff?
  // HINT: It must be similar to what goes on in planetmath_og_display...
  $metadata .= "\\pmauthor{".$node->name."}{".$user->uid."}\n";


  if (isset($node->field_mathtype['und'][0])){
    $math_type = $node->field_mathtype['und'][0]['value'];
    if (isset($math_type)) $metadata .= "\\pmtype{".$math_type."}\n";
  }

  if (isset($node->field_revisioncomment['und'][0])){
    $field_revisioncomment = $node->field_revisioncomment['und'][0]['value'];
    if (isset($field_revisioncomment)) $metadata .= "\\pmcomment{".$field_revisioncomment."}\n";
  }

  if (isset($node->field_msc['und'][0])){
    $field_msc = $node->field_msc['und'][0]['value'];
    if (isset($field_msc)) {
      $classification = explode(",",$field_msc);
      foreach($classification as $c){
	$cc = trim($c);
	$metadata .= "\\pmclassification{msc}{".$cc."}\n";
      }
    }
  }
	
  if (isset($node->field_parent['und'][0])){
    $field_parent = $node->field_parent['und'][0]['value'];
    if (isset($field_parent)) $metadata .= "%\\pmparent{".$field_parent."}\n";
  }

  if (isset($node->field_synonym['und'][0])){
    $field_synonym = $node->field_synonym['und'][0]['value'];
    if (isset($field_synonym)) {
      $synonym = explode(",",$field_synonym);
      foreach($synonym as $s){
	$ss = trim($s);
	$metadata .= "\\pmsynonym{".$ss."}{".$node->field_canonicalname['und'][0]['value']."}\n";
      }
    }
  }

  if (isset($node->field_keywords['und'][0])){
    $field_keywords = $node->field_keywords['und'][0]['value'];
    //do we need to split by colon :   ??
    if (isset($field_keywords)) {
      $keywords = explode(",",$field_keywords);
      foreach($keywords as $k){
	$kk = trim($k);
	$metadata .= "%\\pmkeywords{".$kk."}\n";
      }
    }
  }
	

  if (isset($node->field_related['und'][0])){
    $field_related = $node->field_related['und'][0]['value'];
    if (isset($field_related)){
      $related = explode(",",$field_related);
      foreach($related as $r){
	$rr = trim($r);
	$metadata .= "\\pmrelated{".$rr."}\n";
      }
    }
  }

  if (isset($node->field_defines['und'][0])){
    $field_defines = $node->field_defines['und'][0]['value'];
    if (isset($field_defines)){ 
      $defines = explode(",",$field_defines);
      foreach($defines as $d){
	$dd = trim($d);
	$metadata .= "\\pmdefines{".$dd."}\n";
      }
    }
  }
  $node->field_latex['und'][0]['metadata'] = $metadata;
  dd("NOW Node defines metadata: ".$node->field_latex['und'][0]['metadata']);
  }
}

function planetmath_edit_article_canonicalize_name($node, $str, $count = 1) {
  //dd('Canonicalizing: ' . $str);
  $words = explode(" ", $str);
  $name = "";
  foreach ($words as $word){
    // maybe we need more aggressive replacement
    $word = ucfirst(str_replace ("$", "", $word));
    $name = $name . $word;
  }

  $match = FALSE;

  // needs to be adjusted for the updating case!
  $othernames = db_query("SELECT field_canonicalname_value AS name, entity_id FROM {field_data_field_canonicalname} WHERE entity_id <> :nid", array('nid' => $node->nid));
  foreach ($othernames as $othername){
    if(strcmp($othername->name, $name) === 0){
      $match = TRUE;
      //dd('found match');
    }
  }

  if($match) {
    return planetmath_edit_article_canonicalize_name($node, $name . $count, $count + 1);
  } else {
    //dd('Returning: ' . preg_replace("/[^a-zA-Z0-9\s]/", "", $name));
    // finally, replace non-alphabetic stuff
    // (is this the best way?)
    return preg_replace("/[^a-zA-Z0-9\s]/", "", $name);;
  }
}

// EOF
