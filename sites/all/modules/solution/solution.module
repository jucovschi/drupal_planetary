<?php

/* We implement hook_entity_info_alter and hook_preprocess_node,
   together with node--problem--content.tpl.php (in the templates
   directory) and solution-node-form.tpl.php (in this directory) in
   order to be able to show a problem's content at the top of the page
   when filling in a solution.

   Throughout all of this, "content" in the name of the relevant "view
   mode".  This is picked up by hook_preprocess_node which then
   provides a theming suggestion.  

   Ultimately the (rendered?) content is included into the solution form by running
   node_view($my_problem,'content')
   inside
   solution_form_solution_node_form_alter(...). 

   Finally, note that in order for this to work "out of the box", we need
   to set visibility for 'field_question_latex' to be non-hidden in 
   hook_node_view, otherwise it won't actually be available for theming.
   
   */

/**
 * implements hook_entity_info_alter
 * - part of creating a custom way to render a node
 */ 
function solution_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['content'] = array(
    'label' => t('Just the content'),
    'custom settings' => TRUE,
  );
}

/**
 * implements hook_preprocess_node
 * - another part of creating a custom way to render a node
 */ 
function solution_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'content') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__content';
  }
}

/* Final step: in order to "turn on" the custom rendering, we need to
   adjust the field instance for the relevant field, in this case,
   field_problem_latex.  It is possible to do that within the UI, at
   admin/structure/types/manage/NODETYPE/display/VIEWMODE i.e. in this
   case, admin/structure/types/manage/problem/display/content ...
   
   We can get a hint about how to implement that in code from the
   function that defines the relevant action on that page:
 
   http://api.drupal.org/api/drupal/modules!field_ui!field_ui.admin.inc/function/field_ui_display_overview_form_submit/7
   
   And another clue from looking at the settings for field_problem_latex in the
   field_config_instance table.

   Namely, it seems we have to do something like this:

   $instance = field_read_instance('node', 'field_problem_latex', 'problem');
   $instance['display']['content'] = array(
   'label' => 'above', 
   'type' => 'latex_formatter', 
   'weight' => 0, 
   'settings' => array(),
   'module' => 'latex_field',
   );
   field_update_instance($instance);

   Presumably it makes sense to make such adjustments from within the
   .install file for this module, or come to think of it maybe it
   would make even more sense to do it within the "problem.install".
   Or better still, create a separate module that allows for a "just
   the content" view of all of the nodes that we might want to sling
   around like this!  But that can come later.  I'll try sticking the
   above into the .install file for this module, and then we can test
   it out next time we install the code. */

/**
 * Model functions
 */
function solution_model_saveSolution($node) {
  db_merge('problem_has_solution')
          ->key(array('sid' => $node->nid, 'pid' => $node->field_solution_problem['und'][0]['nid']))
          ->fields(array('sid' => $node->nid, 'pid' => $node->field_solution_problem['und'][0]['nid']))
          ->execute();
}

function solution_model_getAllProblems() {
  $query = db_query("SELECT nid, title FROM node WHERE `type`='problem'");
  $return = array();
  foreach ($query as $result) {
    $return[$result->nid] = $result->title;
  }
  return $return;
}

// This is an interesting function, which really implies that we don't "need" to have
// a field that keeps track of which problem the solution solves.  However, for the
// moment it's not SO bad to have the information in two places.  We can fix this
// later.
function solution_model_getProblem($node) {
  $result = db_query("SELECT n.nid FROM node n INNER JOIN problem_has_solution phs ON phs.pid = n.nid WHERE phs.sid = :sid", array(':sid' => $node->nid))->fetchObject();

  // Note: instead of doing this, we could just return $result->nid
  $problem = node_load($result->nid);
  return $problem;
}

function solution_view_getLinks($node) {
  $links = array(
      'problem-preview' => l('See Problem', 'node/' . $node->field_solution_problem['und'][0]['nid']->nid),
      'solution-new' => l('Add new Solution', 'node/add/solution/' . $node->field_solution_problem['und'][0]['nid']->nid),
      'solution-other' => l('View other Solutions', 'node/' . $node->field_solution_problem['und'][0]['nid']->nid . '/solutions')
  );
  return $links;
}

/**
 * Drupal hooks 
 */

/**
 * Implementation of hook_form 
 */
/* function solution_form_solution_node_form_alter(&$form, &$form_state) { */
/*   $form['problem'] = array( */
/*       '#type' => 'select', */
/*       '#title' => 'Problem', */
/*       '#options' => solution_model_getAllProblems(), */
/*       '#default_value' => arg(3) */
/*   ); */
/* } */


// This is only relevant if the user changes the problem that the solution is
// attached to.  Which, in theory, could happen.
function solution_node_update($node) {
  if ($node->type == 'solution') {
    solution_model_saveSolution($node);
  }
}

function solution_node_insert($node) {
    if ($node->type == 'solution') {
        //dest would be an array with a string in the form node/add/review/58579
        $dest = drupal_get_destination();
        //dd($dest);
        //we need to extract the numeric
        preg_match("/node\/add\/solution\/([0-9]*)/", $dest['destination'], $matches);
        //dd($matches);
        if (isset($matches[1])) {
	  //dd('i am in the block');
	  //dd($matches[1]);
            $problemID = $matches[1];
            db_merge('problem_has_solution')
                    ->key(array('pid' =>$problemID , 'sid' => $node->nid))
                    ->fields(array('pid' =>$problemID , 'sid' => $node->nid))
                    ->execute();
            drupal_set_message('Solution has been added to the problem');
            drupal_goto('node/' . $problemID);
        }
    }
}

// We could put in a second parameter here if we wanted to do some
// more particular tweaks to the view mode, see
// http://api.drupal.org/api/drupal/modules!node!node.api.php/function/hook_node_view/7
function solution_node_view($node, $view_mode){
  if($view_mode!='content'){
  // for node with type==solution
  if($node->type == 'solution'){
    $my_problem = $node->field_solution_problem['und'][0]['nid'];
    $node->content['problem_content'] = node_view(node_load($my_problem),'content');
  }

  // for node with type==problem
  if($node->type == 'problem'){
    $newlinks = array();
    if (isset($node->content['planetary_links'])) {
	$oldlinks=$node->content['planetary_links']['#links'];
	if(!empty($oldlinks)) {
	  $newlinks=array_merge($oldlinks,solution_add_links($node));
	} else {
	  $newlinks = solution_add_links($node);
	}
      } else {
      $newlinks = solution_add_links($node);
    }

    $node->content['planetary_links'] = array(
        '#markup' => '',
        '#weight' => 10,
        '#theme' => 'planetary_links',
        '#links' => $newlinks
    );

    // Need to set this to non-hidden in order for it to show up
    $node->content['field_question_latex']['#hidden'] = FALSE;
  }
  }
}

function solution_theme($existing, $type, $theme, $path){
  return array('solution_node_form' => array(
					    'render element' => 'form',            
					    'template' => 'solution-node-form',
					    'path' => drupal_get_path('module', 'solution'),
					    )
  );
}


/**
 * Implementation of hook_form_FORM_ID_alter()
 * @param array $form
 * @param array $form_state
 * @param array $form_id 
 */

// I'm not entirely sure this will work for us, but maybe.
// We SELECT the argument, but will it also be displayed?  It should be!
function solution_form_solution_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  //dpm($form);

  if(isset($form['#node']->field_solution_problem['und'][0]['nid'])) {
    $val = $form['#node']->field_solution_problem['und'][0]['nid'];
  } else {
    $val = arg(3); 
  }
  // SOMEHOW THIS STUFF SCREWS UP THE VALIDATION
  // SO COMMENTING IT OUT.
  // ANYWAY, I'M GUESSING THE AUTOCOMPLETE FIELD TAKES CARE OF CHOOSING AVAILABLE ITEMS
  // FOR US...
  //$form['field_solution_problem']['und']['#type'] = 'select';
  //$form['field_solution_problem']['und']['#title'] = 'Problem';
  //$form['field_solution_problem']['und']['#options'] = solution_model_getAllProblems();
  $form['field_solution_problem']['und'][0]['nid']['#default_value'] = $val;
  $my_problem = node_load($val);
  //dpm(node_view($my_problem,'content'));
  $form['problem_content'] = node_view($my_problem,'content');
}

// We will only consider adding new solutions, not existing solutions
function solution_add_links($node) {
    $links = array(
        'attach-solution' => l('Add a solution to this problem', 'node/add/solution/' . $node->nid)
    );
    return $links;
}