<?php

/**
 * A module that allows new input types such as LaTeX and sTeX
 */

/**
 * Implements hook_help
 *
 * @param unknown_type $path
 *  Which path of the site we're using to display help
 * @param unknown_type $arg
 *  Array that holds the current path as returned from the arg() function
 */

global $debug_drutexml; 

$debug_drutexml = 0;

function drutexml_help($path, $arg) {
  switch ($path) {
    case "admin/help#drutexml":
      return '<p>' . t('Allows new input methods such as LaTeX') . '</p>';
      break;
  }
}


function drutexml_info() {
  $blocks['drutexml'] = array(
    'info' => t('LaTeX filter'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_menu().
 */
function drutexml_menu() {
  $items['drutexml'] = array(
    'title' => 'LaTeX filter implemented via LaTeXML',
    'type' => MENU_CALLBACK,
    'page callback' => '_drutexml_information',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_filter_info().
 */
function drutexml_filter_info() {
  global $debug_drutexml; 
  $filters = array();
  
  $filters['latex'] = array(
    'title' => t('LaTeX filter'),
    'description' => t('The text will be passed as LaTeX to LaTeXML daemon and then shown to the user'),
    'process callback' => '_drutexml_filter_latex_process',
    'default settings' => array(
      'latexml_url' => 'http://latexml.mathweb.org/convert',
      'latexml_preamble' => '',
      'latexml_profile' => 'planetmath',
    ),
    'cache' => $debug_drutexml == 0,
    'settings callback' => '_drutexml_filter_latex_settings',
    'tips callback' => '_drutexml_filter_latex_tips',
  );
  $filters['image_sanetizer'] = array(
    'title' => t('Image Sanetizer'),
    'description' => t('Replaces images with src="some local path" to images pointing to src="sites/default/files/nodeid"'),
    'process callback' => '_drutexml_image_sanetizer',
    'cache' => $debug_drutexml == 0,
  );
  $filters['xhtml2html5'] = array(
    'title' => t('XHTML to HTML5 filter'),
    'description' => t('Removes namespaces'),
    'process callback' => '_drutexml_xhtml2html5',
    'cache' => $debug_drutexml == 0,
  );
  $filters['tntbase_preamble_enricher'] = array(
    'title' => t('TNTBase enricher of the preamble'),
    'description' => t('Enriches the preamble of the sTeX files with the path in the sTeX repository'),
    'process callback' => '_drutexml_preamble_enricher',
    'default settings' => array(
      'tntbase_prefix' => 'http://127.0.0.1',
    ),
    'settings callback' => '_drutexml_filter_tnt_settings',
    'cache' => $debug_drutexml == 0,
  );
  $filters['omdoc2html5'] = array(
    'title' => t('OMDOC to HTML5 filter'),
    'description' => t('Transforms OMDoc output to HTML5'),
    'process callback' => '_drutexml_omdoc2html5',
    'cache' => $debug_drutexml == 0,
    'default settings' => array(
      'jomdoc_url' => 'http://latexml.mathweb.org/convert',
      'css' => '',
    ),
    'settings callback' => '_drutexml_filter_omdoc_settings',
  );
  return $filters;
}

function drutexml_field_formatter_info() {
  return array('context_aware' => array(
      'label' => t('Context aware'), 
      'description' => t('Context aware formatter allows the filters to have access to all node fields rather than only the text'),
      'settings' => array(
          "secondary_formatter" => "text_default"
        ),
      'field types' => array('text', 'text_long', 'text_with_summary', 'field_latex')
    ));
}

function drutexml_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $drutexml_node;
  $element = array();

  switch ($display['type']) {
    # doing this for text fields only
    case 'context_aware':
      $drutexml_node = $entity;
      foreach ($items as $delta => $item) {
        $column = "";
        // most of the cases the right column is value
        if (isset($item["value"]))
          $column = "value";
        // in case of LaTeX field it's "document"
        if (isset($item["document"]))
          $column = "document";
        $output = check_markup($item[$column], $item['format'], $langcode);
        $element[$delta] = array('#markup' => $output);
      }
    break;
  }
  return $element;
}

/**
 * Enriches sTeX sources with \baseURI allowing dependencies to be resolved
 */
function _drutexml_omdoc2html5($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $debug_drutexml;
  $key = md5($text);
  $cache = _drutexml_cache_read($key);

  // HACK
  $text = str_replace("xmlns:stex=\"http://kwarc.info/ns/sTeX\"", "xmlns:stex=\"http://kwarc.info/ns/sTeX\" xml:base=\"http://192.168.111.129:3002/sissi/winograd/cds/test.omdoc\"", $text);

  if (isset($cache) && $debug_drutexml == 0) {
    return $cache;
  }

  $host = isset($filter->settings['jomdoc_url']) ? $filter->settings['jomdoc_url'] : 'http://127.0.0.1/jomdoc.php';
  $data = "omdoc=".urlencode($text);
  $content = planetary_webglue_do_post($host,$data);

  _drutexml_cache_set($key, $content);

  return $content;
}

function _drutexml_filter_omdoc_settings($form, $form_state, $filter, $format, $defaults) {
    $settings['jomdoc_url'] = array(
    '#type' => 'textfield',
    '#title' => t('OMDOC daemon URL'),
    '#default_value' => isset($filter->settings['jomdoc_url']) ? $filter->settings['jomdoc_url'] : $defaults['jomdoc_url'],
    '#description' => t('The URL of the OMDOC daemon.'),
  );
  return $settings;
}

function _drutexml_filter_tnt_settings($form, $form_state, $filter, $format, $defaults) {
    $settings['tntbase_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('TNTBase Prefix'),
    '#default_value' => isset($filter->settings['tntbase_prefix']) ? $filter->settings['tntbase_prefix'] : $defaults['tntbase_prefix'],
    '#description' => t('The URL prefix to be prepended to the TNTBase path to get the file name'),
  );
  return $settings;
}


/**
 * Enriches sTeX sources with \baseURI allowing dependencies to be resolved
 */
function _drutexml_preamble_enricher($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $drutexml_node;
  if (isset($drutexml_node) && isset($drutexml_node->tnt_path)) {
    $path = $drutexml_node->tnt_path;
    // making sure we're not doing this for non TNT files 
    if (strlen($path) > 0) {
      $dir = dirname($path);
      $basePath = $filter->settings["tntbase_prefix"].$dir;
      //$text = "\\baseURI[".$dir."]{".$basePath."}\n".$text;
    }
  }
  return $text;
}

/**
 * @see drutexml_menu
 * Returns basic info about the filter.
 */
function _drutexml_information() {
  return t(
    "We implement here a LaTeX filter that aims at transforming the content from LaTeX
    to XHTML. To use this filter go to !link and configure the input formats.",
    array('!link' => l('admin/config/contents/formats', 'admin/config/contents/formats'))
  );
}

/**
 * Settings callback for LaTeX filter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $filter
 * @param unknown_type $format
 * @param unknown_type $defaults
 */
function _drutexml_filter_latex_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['latexml_url'] = array(
    '#type' => 'textfield',
    '#title' => t('LaTeXML daemon URL'),
    '#default_value' => isset($filter->settings['latexml_url']) ? $filter->settings['latexml_url'] : $defaults['latexml_url'],
    '#description' => t('The URL of the LaTeXMl daemon.'),
  );
  $settings['latexml_profile'] = array(
    '#type' => 'textfield',
    '#title' => t('Profile to be used'),
    '#default_value' => isset($filter->settings['latexml_profile']) ? $filter->settings['latexml_profile'] : $defaults['latexml_profile'],
    '#description' => t('The profile to be used for the daemon.'),
  );
  $settings['latexml_preamble'] = array(
    '#type' => 'textarea',
    '#title' => t('Preamble to be used'),
    '#default_value' => isset($filter->settings['latexml_preamble']) ? $filter->settings['latexml_preamble'] : $defaults['latexml_preamble'],
    '#description' => t('The preamble to be used for the daemon.'),
  );
  $settings['latexml_reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset LaTeXML cache'),
    '#submit' => array('_drutexml_filter_reset_cache'),
  );
  return $settings;
}

function _drutexml_cache_read($md5) {
	$cache = db_select("drutexml_cache", "a")->fields('a', array("xhtml"))->condition("a.cachemd5", $md5)->execute()->fetchAll();
	if (count($cache)==0) {
		return;
	}
	return $cache[0]->xhtml;
}

function _drutexml_cache_set($md5, $xhtml, $etid = NULL) {
  global $debug_drutexml;
  if ($debug_drutexml)
    {
      dd($md5." merging drutexml cache on ".$xhtml." with etid " .$etid);
    }
	db_merge("drutexml_cache")
	  ->key(array("cachemd5" => $md5))
	  ->fields(array(
		"cachemd5" => $md5,
		"xhtml" => $xhtml,
                "etid" => $etid
			 )
		   )
	  ->execute();
}

function _drutexml_cache_clear() {
	db_delete("drutexml_cache")->execute();
}


function _drutexml_filter_reset_cache($form, &$form_state) {
	_drutexml_cache_clear();
}

function process_latexml($host, $text, $preamble, $metadata, $profile) {
  global $debug_drutexml;

  $data = 'profile='.$profile.'&tex=' . urlencode($text);
  if (isset($preamble) && isset($metadata)) {
    // new format:
    $data .= "&preamble=literal:" . urlencode($preamble . "\n") . urlencode($metadata . "\n"). urlencode('\begin{document}'); 
    // old format:
    // $data .= "&preamble=" . urlencode($preamble . "\n") . urlencode($metadata . "\n"). urlencode('\begin{document}'); 
  }

  if ($debug_drutexml)
    {
      dd("LATEXML HOST IS");
      dd($host);
      
      dd("Preamble is");
      dd($preamble);
      dd("Tex");
      dd($text);

      dd($data, "data is");
    }
 
  $content = planetary_webglue_do_post($host,$data);
  if ($debug_drutexml)
    {
      dd("RESULT");
      dd($content);
    }
  $res = json_decode($content);
  $res = trim($res->{'result'});
  return $res;
}

/**
 * LaTeX filter process callback
 * @see drutexml_filter_info
 *
 * @param unknown_type $text
 * @param unknown_type $filter
 * @param unknown_type $format
 */
function _drutexml_filter_latex_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  global $debug_drutexml;

  $key = md5($text);
  $cache = _drutexml_cache_read($key);
  if (isset($cache) && $debug_drutexml == 0) {
  	return $cache;
  }
  $hasPreamble = '/^([\s\S]*)\\\\begin{document}([\s\S]*)\\\\end{document}([\s\S]*)$/';
  $m = preg_match($hasPreamble, $text, $matches);
  
  global $latex_preamble;
  global $latex_metadata;
  global $latex_etid;
  global $drutexml_node;


  if ($debug_drutexml)
    {
      dd($latex_preamble,"received preamble");
      dd($latex_etid,"received etid");
    }

  // so it receives the right data
  if ($m > 0) {
  	$preamble = $matches[1];
  	$text = $matches[2];	
  } else
  if (isset($latex_preamble) && strlen($latex_preamble) > 0) {
  		$preamble = $latex_preamble;
  } else
  if (isset($drutexml_node->field_preamble)) {
    $nid = $drutexml_node->field_preamble["und"][0]["nid"];
    if (isset($nid)) {
      $node = node_load($nid);
      $preamble = $node->body["und"][0]["value"];
    }
  } else
    {
     	$preamble = $filter->settings['latexml_preamble'];
    }

  if (isset($latex_metadata) && strlen($latex_metadata) > 0) {
    $metadata = $latex_metadata;
  } else
    {
      $metadata = "%BEGIN METADATA BLOCK
%END METADATA BLOCK";
    }
  
  /// Ideally we would have a preprocess hook, but I need to sort out
  /// the details of the hook system first...

  // $text = module_invoke_all('drutexml_preprocess',$text);   
  // dd($text);
  // $text=$text[0];
  $host = isset($filter->settings['latexml_url']) ? $filter->settings['latexml_url'] : 'http://latexml.mathweb.org/convert';

  $res = process_latexml($host, $text, $preamble, $metadata, $filter->settings['latexml_profile']);
  
  if ($debug_drutexml)
    {  
      dd("LATEXML RESULT IS");
      dd($res);
    }

  /* $data = array ('json_data' => json_encode(array('function'=>'linkentry', */
  /*                                                 'body'=>$res, */
  /*                                                 'format'=>'html', */
  /*                                                 'domain'=>'planetmath', */
  /*                                                 'nolink'=>'false'))); */
  /* $res = planetary_webglue_do_post('http://127.0.0.1:3001/autolink',$data); */

  $nexres = module_invoke_all('drutexml_postprocess',$res);
  if (!empty($nexres)) {
    $nexres= $nexres[0];
    $nexres = trim(json_decode($nexres)->{'result'});  
    if (strlen($nexres)>strlen($res)) {
      $res = $nexres;
    }
  }

  if(isset($latex_etid)) {
    _drutexml_cache_set($key, $res, $latex_etid);
  } else {
    _drutexml_cache_set($key, $res);
  }

  return $res;
}

/**
 * 
 * Image Sanetizer Filter
 * @param unknown_type $text
 * @param unknown_type $filter
 * @param unknown_type $format
 * @param unknown_type $langcode
 * @param unknown_type $cache
 * @param unknown_type $cache_id
 */
function _drutexml_image_sanetizer($text, $filter, $format, $langcode, $cache, $cache_id) {
	$webroot = "/webroot='([^']+)'/";
	$count = preg_match($webroot, $text, $arr, PREG_OFFSET_CAPTURE);
	if ($count == 0) // no webroot found 
		return $text;
	$webpath = url('<front>').$arr[1][0]."/";
	
	$pattern = "/<img([^>]*)src\s*=\s*[\"']([^\"'\/]+)[\"']([^>]*)>/";
	$replace = "<img$1 src='".$webpath."$2' $3>";
	$result = preg_replace($pattern, $replace, $text);
	return $result;
}


function _drutexml_xhtml2html5($text, $filter, $format, $langcode, $cache, $cache_id) {

  $text = str_replace('m:','',$text); //stupid firefox doesn't know about namespaces in HTML ... so it's rendered badly. otherwise, uncomment next line.
  $text = str_replace('xml:','',$text); //also remove xml:id
  return $text;
}

/**
 * Filter tips
 *
 * @param unknown_type $filter
 * @param unknown_type $format
 * @param unknown_type $long
 */
function _drutexml_filter_latex_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    return t('<em>LaTeX</em> content replaced with XHTML');
  } else {
    return t('You can write LaTeX and you will get back rendered XHTML');
  }
}

function drutexml_node_view_alter(&$build) {
  $node = $build['#node'];
  if ($node) {
    $node->textitle = $node->title;
    $node->title = check_markup($node->title,'filtered_html',TRUE);
    drupal_set_title($node->title,PASS_THROUGH);
  }
}

function drutexml_process_node(&$vars) {
  $node = $vars['node'];
  if ($node) {
    if ((!$vars['title']) && (!isset($node->textitle)) && isset($node->title)) {
      $vars['title'] = check_markup($node->title,'filtered_html',TRUE);
    } else {
      $vars['title'] = $node->title;
    }
    drupal_set_title($node->textitle);
  }
}
