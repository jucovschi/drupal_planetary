<?php

/**
 * Adds useful blocks for the planetmath theme
 * @author Alex Dumitru <m.dumitru@jacobs-university.de> 
 *
 * Note regarding private articles:
 * At present, there's a slight loophole in the "privacy" feature, since CORRECTIONS
 * and COMMENTS can be posted on private articles, and these secondary objects will
 * show up in the public feed.  In order to fix this, we need to make a suitable
 * join (or filter)...
 */
define('PLANETMATH_BLOCKS_EVERYTHING_ELSE_NUMBER_OF_ITEMS_ON_BLOCK', 10);
define('PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK', 7);
define('PLANETMATH_BLOCKS_NUMBER_OF_MESSAGES_ON_BLOCK', 7);
define('PLANETMATH_BLOCKS_NUMBER_OF_USERS_ON_BLOCK', 7);
define('PLANETMATH_BLOCKS_NUMBER_OF_CORRECTIONS_ON_BLOCK', 5);
define('PLANETMATH_BLOCKS_NUMBER_OF_CHILDREN_ON_BLOCK', 10);
define('PLANETMATH_BLOCKS_NUMBER_OF_PROBLEMS_ON_BLOCK', 5);
define('PLANETMATH_BLOCKS_NUMBER_OF_SOLUTIONS_ON_BLOCK', 5);
define('PLANETMATH_BLOCKS_NUMBER_OF_REVIEWS_ON_BLOCK', 5);

define('PLANETMATH_BLOCKS_EVERYTHING_ELSE_TYPES',
       serialize(array('correction', 
		       'question',
		       'image',
		       'group',
		       'problem',
		       'solution',
		       'review')));

/**
 * Queries for the block views 
 */
function planetmath_blocks_queryBasic($type, $sortBy = 'n.created') {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created, n.changed
    FROM node n 
    LEFT JOIN field_data_body fdb
    ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` = :type ORDER BY $sortBy 
    DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array(':type' => $type));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryGeneral($type, $sortBy = 'n.created') {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created, n.changed
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    INNER JOIN field_data_field_published f ON n.nid = f.entity_id
    WHERE n.`type` = :type 
    AND f.field_published_value = 1
    ORDER BY $sortBy DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array(':type' => $type));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryEncyclopedia() {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created, n.changed
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    INNER JOIN field_data_field_published f ON n.nid = f.entity_id
    INNER JOIN field_data_field_section s ON n.nid = s.entity_id
    WHERE n.`type` = 'article'
    AND f.field_published_value = 1
    AND s.field_section_value = 'Reference'
    ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK);
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

/**
 * Queries for the block views 
 *
 * Note, we want to skip things where "created" is the same as "changed" 
 * (i.e. we're at version 1).
 */
function planetmath_blocks_queryRevisions($type, $sortBy = 'n.created') {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created, n.changed
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN node_revision nr ON n.vid = nr.vid
    INNER JOIN users u ON u.uid = nr.uid
    INNER JOIN field_data_field_published f ON n.nid = f.entity_id
    WHERE n.`type` = :type 
    AND f.field_published_value = 1
    AND n.created <> n.changed
    ORDER BY $sortBy DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array(':type' => $type));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryPersonalResponses($uid) {
  $results = db_query("SELECT c.cid, n.nid, n.type, n.title, c.subject, c.uid, c.changed, u.name AS username FROM comment c
      INNER JOIN node n ON n.nid = c.nid      
      INNER JOIN users u ON u.uid = c.uid
      WHERE n.uid = :node_uid AND c.uid != :comment_uid
      ORDER BY c.changed DESC LIMIT 0,".PLANETMATH_BLOCKS_NUMBER_OF_ITEMS_ON_BLOCK, array('node_uid' => $uid, 'comment_uid' => $uid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;  
}

// I want the non-encyclopedia articles to show up here in addition to all the 
// other stuff... I think maybe easiest way to achieve this is with a UNION?
function planetmath_blocks_queryEverythingElse() {
  $results = db_query("(SELECT n.nid AS nid, n.title AS title, n.type as type, n.uid, fdb.body_value AS body, u.`name` AS username, n.created AS created, n.changed, 'foo' AS metadata
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` IN (:type) ORDER BY n.changed DESC)
UNION ALL
   (SELECT n.nid AS nid, n.title AS title, n.type as type, n.uid, fdb.body_value AS body, u.`name` AS username, n.created AS created, n.changed, s.field_section_value AS metadata 
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    INNER JOIN field_data_field_published f ON n.nid = f.entity_id
    INNER JOIN field_data_field_section s ON n.nid = s.entity_id
    WHERE n.`type` = 'article'
    AND f.field_published_value = 1
    AND s.field_section_value <> 'Reference'
    ORDER BY n.created DESC) ORDER BY created DESC
 LIMIT 0," . PLANETMATH_BLOCKS_EVERYTHING_ELSE_NUMBER_OF_ITEMS_ON_BLOCK, array(':type' => unserialize(PLANETMATH_BLOCKS_EVERYTHING_ELSE_TYPES)));
  $return = array();
  // We will filter out any GROUPS that are not of subtype "Team".
  // NB. this could be done with another subselect and a bigger union.
  foreach ($results as $result) {
    if ($result->type == 'group') {
      $subtype = node_load($result->nid)->field_group_subtype['und'][0]['value'];
      if ($subtype == "Team") {
	$return[] = $result;
      }
    } else {
      $return[] = $result;
    }
  }
  return $return;
}

/* "SELECT n.nid AS nid, n.type, n.changed, n.title AS title, n.uid, fdb.body_value AS body, u.`name` AS username, n.created
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` = 'forum' ORDER BY n.changed DESC LIMIT 0," */
function planetmath_blocks_queryMessages() {
  $results = db_query("(SELECT n.nid AS nid, n.title AS title, n.uid AS uid, n.changed AS changed, n.created AS created, u.name AS username, n.nid AS nid, n.type AS type, fdb.body_value AS body
FROM node n
LEFT OUTER JOIN field_data_body fdb ON n.nid = fdb.entity_id
INNER JOIN users u ON u.uid = n.uid
WHERE (type = 'forum')
ORDER BY created DESC)
UNION ALL
(SELECT c.cid AS nid, c.subject AS title, c.uid AS uid, c.changed AS changed, c.created AS created, c.name AS username, n.nid AS nid, n.type AS type, fcb.comment_body_value AS body
FROM comment c
INNER JOIN node n ON n.nid = c.nid
LEFT OUTER JOIN field_data_comment_body fcb ON c.cid = fcb.entity_id
INNER JOIN users u ON u.uid = c.uid
ORDER BY created DESC) ORDER BY created DESC LIMIT 0, " . PLANETMATH_BLOCKS_NUMBER_OF_MESSAGES_ON_BLOCK);
  $return = array();

  foreach ($results as $result) {
    $return[] = $result;
  }

  return $return;
}

function planetmath_blocks_queryUserList() {
  // jac - for some reason, we were getting a user 0 with no name
  // so I've added an extra line that gets rid of that
  $results = db_query("SELECT u.uid, u.`name`, ut.points
    FROM users u
    LEFT JOIN userpoints_total ut ON ut.uid = u.uid
    WHERE u.name <> ''
    ORDER BY ut.points DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_USERS_ON_BLOCK);

  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_queryCorrections($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, fdb.body_value AS body, u.`name` AS username, n.created, u.uid AS uid, fcx.field_correction_accepted_value as accepted, fcc.field_correction_closed_value as closed
    FROM node n 
    LEFT JOIN field_data_body fdb ON n.nid = fdb.entity_id 
    LEFT JOIN field_data_field_correction_article fca ON fca.entity_id = n.nid
    LEFT JOIN field_data_field_correction_accepted fcx ON fcx.entity_id = n.nid
    LEFT JOIN field_data_field_correction_closed fcc ON fcc.entity_id = n.nid
    INNER JOIN users u ON u.uid = n.uid
    WHERE n.`type` = :type AND fca.field_correction_article_nid = :nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_CORRECTIONS_ON_BLOCK, array(':type' => 'correction', ':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countCorrectionsPerArticle($nid) {
  return (db_query("SELECT COUNT(n.nid) AS cnt FROM node n
                  INNER JOIN field_data_field_correction_article fca ON fca.entity_id = n.nid
                  WHERE fca.field_correction_article_nid = :nid", array(':nid' => $nid))->fetchObject()->cnt > 0) ? true : false;
}

function planetmath_blocks_queryProblems($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, u.`name` AS username, n.created, u.uid AS uid
    FROM node n INNER JOIN article_has_problem AS ahp ON (n.nid=ahp.pid) 
    INNER JOIN users u ON u.uid = n.uid 
    WHERE ahp.aid=:nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_PROBLEMS_ON_BLOCK, array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countProblems($aid) {
  return (db_query("SELECT COUNT(ahp.pid) AS cnt
    FROM article_has_problem AS ahp
    WHERE ahp.aid=:nid LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_PROBLEMS_ON_BLOCK, array(':nid' => $aid))->fetchObject()->cnt > 0) ? true : false;
}

// This function will find the articles that mention this problem
function planetmath_blocks_queryReverseProblems($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, u.`name` AS username, n.created, u.uid AS uid
    FROM node n INNER JOIN article_has_problem AS ahp ON (n.nid=ahp.aid) 
    INNER JOIN users u ON u.uid = n.uid 
    WHERE ahp.pid=:nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_PROBLEMS_ON_BLOCK, array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countReverseProblems($pid) {
  return (db_query("SELECT COUNT(ahp.aid) AS cnt
    FROM article_has_problem AS ahp
    WHERE ahp.pid=:nid LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_PROBLEMS_ON_BLOCK, array(':nid' => $pid))->fetchObject()->cnt > 0) ? true : false;
}

// This function will find the articles that are attached to this article
function planetmath_blocks_queryChildArticles($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, u.`name` AS username, n.created, u.uid AS uid
    FROM node n INNER JOIN field_data_field_parent AS fdfp ON (n.nid=fdfp.entity_id) 
    INNER JOIN users u ON u.uid = n.uid 
    WHERE fdfp.field_parent_nid=:nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_CHILDREN_ON_BLOCK, array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countChildArticles($nid) {
  return (db_query("SELECT COUNT(n.nid) AS cnt
    FROM node n INNER JOIN field_data_field_parent AS fdfp ON (n.nid=fdfp.entity_id) 
    WHERE fdfp.field_parent_nid=:nid LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_CHILDREN_ON_BLOCK, array(':nid' => $nid))->fetchObject()->cnt > 0) ? true : false;
}


function planetmath_blocks_querySolutions($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, u.`name` AS username, n.created, u.uid AS uid
    FROM node n INNER JOIN problem_has_solution AS phs ON (n.nid=phs.sid) 
    INNER JOIN users u ON u.uid = n.uid 
    WHERE phs.pid=:nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_SOLUTIONS_ON_BLOCK, array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countSolutions($pid) {
  return (db_query("SELECT COUNT(phs.sid) AS cnt
    FROM problem_has_solution AS phs
    WHERE phs.pid=:nid LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_SOLUTIONS_ON_BLOCK, array(':nid' => $pid))->fetchObject()->cnt > 0) ? true : false;
}

function planetmath_blocks_queryReviews($nid) {
  $results = db_query("SELECT n.nid AS nid, n.title AS title, u.`name` AS username, n.created, u.uid AS uid
    FROM node n INNER JOIN solution_has_review AS shr ON (n.nid=shr.rid) 
    INNER JOIN users u ON u.uid = n.uid 
    WHERE shr.sid=:nid ORDER BY n.created DESC LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_REVIEWS_ON_BLOCK, array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    $return[] = $result;
  }
  return $return;
}

function planetmath_blocks_countReviews($sid) {
  return (db_query("SELECT COUNT(shr.rid) AS cnt
    FROM solution_has_review AS shr
    WHERE shr.sid=:nid LIMIT 0," . PLANETMATH_BLOCKS_NUMBER_OF_REVIEWS_ON_BLOCK, array(':nid' => $sid))->fetchObject()->cnt > 0) ? true : false;
}

// We could keep track of the "actual" version id on v.log, since it isn't managed anywhere else.
// Getting all of this imported into the system is going to take some work.
function planetmath_blocks_versions($nid) {
  $results = db_query("SELECT v.log AS version, n.nid AS nid, n.changed AS changed, n.title AS title, u.name AS username, u.uid AS uid 
    FROM node_revision v 
    INNER JOIN node n ON v.nid = n.nid 
    INNER JOIN users u ON u.uid = v.uid
    WHERE n.nid = :nid ORDER BY v.timestamp DESC LIMIT 0,7", array(':nid' => $nid));
  $return = array();
  foreach ($results as $result) {
    if(!is_numeric($result->version)){
      $result->version = 1;
    }
    $return[] = $result;
  }
  return array_reverse($return);
}

function planetmath_blocks_countVersionsPerArticle($nid) {
  return (db_query("SELECT COUNT(n.nid) AS cnt FROM node n
                  INNER JOIN node_revision nv ON nv.nid = n.nid
                  WHERE n.nid = :nid", array(':nid' => $nid))->fetchObject()->cnt > 0) ? true : false;
}

// Since this function is used in a lot of different cases,
// the conditional steps inside are important (in order to
// make everything look good)!
//
// It seems sensible to add a 'delta' parameter, so that we can easily decide what
// to do with different kinds of blocks
function planetmath_blocks_blockThemeResults($results, $nid, $delta = NULL) {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $count = count($results);
  $html = "";
  foreach (array_reverse($results) as $result) {
    if (!isset($result->version)) {
      $title = l($result->title, 'node/' . $result->nid);
    } else {
      // $num = 1 + $result->version - $result->nid;
      $title = l(' (v' . $result->version .')', 'node/' . $result->nid);
    }
    if (!isset($result->changed)) {
      $changed = '';
    } else {
      $changed = ' ' . date('Y-m-d',$result->changed);
    }

    // For corrections, we add some annotations
    if (!isset($result->accepted)) {
      $accepted = '';
    } else {
      if($result->accepted==0 && $result->closed==0){
	$accepted = '';
      } else if ($result->accepted==0 && $result->closed==1){
	$accepted = " ✘";
      } else {
	$accepted = " ✓";
      }
    } 

    $html .= '<span>' . $title
	              . ' by ' 
                      . l($result->username, 'user/' . $result->uid) 
	              . $changed
	              . $accepted
                      . '</span><br />';
  }
 
  // we need different kinds of "more" links depending on different circumstances
  // put a link to the view of problems, filtered to problems about this node
  // NOTE: we use customized views for this, see planetmath_blocks.views.inc

  // 'versions' will be dealt with in a different way

  // TODO: we should add a way to see all child articles, if there's more than 10.

if ($delta == 'corrections' && $count == PLANETMATH_BLOCKS_NUMBER_OF_CORRECTIONS_ON_BLOCK) {
    $html .= '<div style="text-align:right;">' . l('see all',
						   'corrections/'.$nid) . '</div>';
  } else if ($delta == 'problems' && $count == PLANETMATH_BLOCKS_NUMBER_OF_PROBLEMS_ON_BLOCK) {
    $html .= '<div style="text-align:right;">' . l('see all',
						   'problems/'.$nid) . '</div>';
  } else if ($delta == 'solutions' && $count == PLANETMATH_BLOCKS_NUMBER_OF_SOLUTIONS_ON_BLOCK) {
    $html .= '<div style="text-align:right;">' . l('see all',
						   'solutions/'.$nid) . '</div>';
  } else if ($delta == 'reviews' && $count == PLANETMATH_BLOCKS_NUMBER_OF_REVIEWS_ON_BLOCK) {
    $html .= '<div style="text-align:right;">' . l('see all',
						   'reviews/'.$nid) . '</div>';
  } 
  return $html;
}

function planetmath_blocks_blockThemeResultsWithDate($results, $sortBy = 'created') {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $dates = array();

  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';
  foreach ($results as $result) {
    if (!isset($result->version)) {
      $result->version = "";
    }

    if ((count($dates) === 0) || 
	strcmp($dates[count($dates) - 1], date('Y-m-d',$result->$sortBy)) != 0)
      {
	array_push($dates,date('Y-m-d',$result->$sortBy));
	$html .= '<span class="block-day-date">'.date('Y-m-d',$result->$sortBy).'</span><br />';
      }

    $html .= '<span >' . l($result->title . ' ' . $result->version, 'node/' . $result->nid) . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
  }
  if ($sortBy == 'created') {
    $html .= '<div style="text-align:right;">' . l('more', 'articles') . '</div>';
  } else if ($sortBy == 'changed') {
    $html .= '<div style="text-align:right;">' . l('more', 'revisions') . '</div>';
  }
  return $html;
}

function planetmath_blocks_blockThemeResultsWithDateBold($results, $sortBy = 'created') {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $dates = array();

  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';
  foreach ($results as $result) {
    if (!isset($result->version)) {
      $result->version = "";
    }

    if ((count($dates) === 0) || 
	strcmp($dates[count($dates) - 1], date('Y-m-d',$result->$sortBy)) != 0)
      {
	array_push($dates,date('Y-m-d',$result->$sortBy));
	$html .= '<span class="block-day-date">'.date('Y-m-d',$result->$sortBy).'</span><br />';
      }

    $html .= '<span >' . '<b>'.l($result->title . ' ' . $result->version, 'node/' . $result->nid).'</b>' . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
  }
  if ($sortBy == 'created') {
    $html .= '<div style="text-align:right;">' . l('more', 'articles') . '</div>';
  } else if ($sortBy == 'changed') {
    $html .= '<div style="text-align:right;">' . l('more', 'revisions') . '</div>';
  }
  return $html;
}

function planetmath_blocks_blockThemeEverythingElseWithDate($results, $sortBy = 'created') {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $dates = array();

  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';
  foreach ($results as $result) {
    if (!isset($result->version)) {
      $result->version = "";
    }

    if ((count($dates) === 0) || 
	strcmp($dates[count($dates) - 1], date('Y-m-d',$result->$sortBy)) != 0)
      {
	array_push($dates,date('Y-m-d',$result->$sortBy));
	$html .= '<span class="block-day-date">'.date('Y-m-d',$result->$sortBy).'</span><br />';
      }

    // It would be nice to include the "parent" in some fashion, when it exists, i.e.
    // new solution XX to problem YY.

    if ($result->type == 'article'){
      $kind = "<em>" . $result->metadata . "</em>";
    } else {
      $kind = $result->type;
    }

    $html .= '<span>' . 'new '. $kind . ': '
              . l($result->title . ' ' . $result->version, 'node/' . $result->nid) 
              . ' by ' . l($result->username, 'user/' . $result->uid) 
              . '</span><br />';
  }

  $html .= '<div style="text-align:right;">' . l('more', 'latest') . '</div>';
  return $html;
}

function planetmath_blocks_blockThemeUserListResults($results) {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  // jac - got the right-justified numbers working
  $html = "";
  foreach ($results as $result) {
    $html .= '<span>' . l($result->name, 'user/' . $result->uid) . '</span><span class="block-day-date">' . intval($result->points) . ' </span><br />';
  }
  // jac - link to see more
  $html .= '<div style="text-align:right;">' . l('more', 'scores') . '</div>';
  return $html;
}

function planetmath_blocks_blockThemeMessagesResults($results) {
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';

  foreach ($results as $result) {
    if (isset($result->cid)) {

      // This gives some small visual indication of article nodes vs forum nodes.
      if ($result->type == 'article') {
        $code = 'P';
      } else {
        $code = 'p';
      }

      $html .=  '<span class="block-day-date">' . date('Y-m-d', $result->changed) . '</span>'. '<br /><span class="message-block-item">'. ' [' . l($code, 'node/' . $result->nid) . "] " . '<b>'.l($result->subject, 'node/' . $result->nid, array('fragment' => 'comment-' . $result->cid)).'</b>' . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
    } else {
      $html .= '<span class="block-day-date">'. date('Y-m-d', $result->changed) . '</span>' . '<br /><span class="message-block-item">' . '<b>'.l($result->title, 'node/' . $result->nid).'</b>' . ' by ' . l($result->username, 'user/' . $result->uid) . '</span><br />';
    }
  }
  // jac - link to see more
  $html .= '<div style="text-align:right;">' . l('more', 'talk') . '</div>';
  return $html;
}

function planetmath_blocks_blockThemeMyPersonalResults($results) {
  global $user;
  if(!$user->uid){
    return "<h4>Please log in to view the results</h4>";
  }
  if (empty($results)) {
    return '<h4>No results found</h4>';
  }
  $html = "";// '<div style="padding-left:7%;padding-right:10%;padding-bottom:10%;"><br />';

  foreach ($results as $result) {
    $html .= '<span>' . date('Y-m-d', $result->changed) 
              . " - " . l($result->username, 'user/' . $result->uid)
              . " " . l('replied', 'node/' . $result->nid, 
                           array('fragment' => 'comment-' . $result->cid))
              . ' to ' . l($result->title, 'node/' . $result->nid) . '</span><br />';
  }
 // $html .= "</div>";
  return $html;
}

/**
 * Implementation of hook_block_info 
 */
function planetmath_blocks_block_info() {
  $blocks = array();
  $block_names = array('article', 'request', 'problem', 'solution', 'review', 'forum', 'news', 'correction', 'pversion', 'cross-ref', 'userlist', 'revision', 'message', 'everything-else', 'personal-feed');
  foreach ($block_names as $name) {
    $blocks[$name] = array(
        'info' => t($name),
    );
  }
  return $blocks;
}

// We need to build a real crossRef block!
function planetmath_blocks_crossRefMockBlock() {
  return array(
      'subject' => 'Cross References',
      'content' => 'open problem, amenable, contradiction, relation, equivalence, clear, support, theorems, injective'
  );
}

function planetmath_blocks_block_versions($nid) {
  return array(
      'subject' => 'Versions',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_versions($nid),$nid,'versions')
  );
}

// We'll add the user and author information here; we can later expand to deal with
// any other provenance information that's relevant.

// Note that the "submitted by" label is actually wrong, since the owner could have
// changed in the mean time.  We should fix that.

/* Note: this replaces the following code from node.tpl.php:

  <?php if ($display_submitted): ?>
    <div class="submitted">
      <?php print $submitted; ?>

    <?php if ($type === 'article'): ?>
      <p> Authors:
     <?php print render($content['planetmath_og_display_coauthors']); ?>
      </p>
    <?php endif; ?>
    </div>
  <?php endif; ?>
*/

// It also makes the planetmath_og_display module unnecessary

function planetmath_blocks_block_provenance($nid) {
  $node=node_load($nid);
  //dpm($node);
  $owner=user_load($node->uid);
  $provenance = "Submitted by: " . l($owner->name,'user/'.$node->uid)
               .'<br> '. date('D, Y-m-d - H:i',$node->created);

  if($node->type=='article') {
    $links = array(
		   "$owner->name" => l($owner->name, 'user/' . $owner->uid),
		   );

    // Get the coauthor group for this node, if any
    $group=planetmath_og_model_getNodeEditingGroup($nid);

    if(isset($group->nid)) {
      // This query needs to be fixed
      $results = db_query("SELECT users.name,users.uid
    FROM og_membership om INNER JOIN users
    ON om.etid = users.uid 
    WHERE om.entity_type = 'user' AND om.gid= :gid ORDER BY om.created DESC",
			  array(':gid' => $group->nid));

      foreach ($results as $result) {
	if($result->name){
	  $new = array(
		       "$result->name" => l($result->name, 'user/' . $result->name),
		       );
	  $links = array_merge($links,$new);
	}
      }
    }
    $provenance .= "<br>Author(s): " . implode($links, ", ");
  }

  return array(
      'subject' => 'Info',
      'content' => $provenance
  );
}

function planetmath_blocks_block_corrections($nid) {
  return array(
      'subject' => 'Corrections',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_queryCorrections($nid),$nid,'corrections')
  );
}

function planetmath_blocks_block_problems($nid) {
  return array(
      'subject' => 'Problems',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_queryProblems($nid),$nid,'problems')
  );
}

function planetmath_blocks_block_reverseproblems($nid) {
  return array(
      'subject' => 'Related Articles',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_queryReverseProblems($nid),$nid,'reverseproblems')
  );
}

function planetmath_blocks_block_childarticles($nid) {
  return array(
      'subject' => 'Attached Articles',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_queryChildArticles($nid),$nid,'childarticles')
  );
}

function planetmath_blocks_block_solutions($nid) {
  return array(
      'subject' => 'Solutions',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_querySolutions($nid),$nid,'solutions')
  );
}

// Reviews should come with some metadata that says whether the problem is correct or not
// and ideally this would be reflected in this block!
function planetmath_blocks_block_reviews($nid) {
  return array(
      'subject' => 'Reviews',
      'content' => planetmath_blocks_blockThemeResults(planetmath_blocks_queryReviews($nid),$nid,'reviews')
  );
}

function planetmath_blocks_block_messages() {
  return array(
      'subject' => 'Latest Messages',
      'content' => planetmath_blocks_blockThemeMessagesResults(planetmath_blocks_queryMessages())
  );
}

function planetmath_blocks_block_revisions() {
  return array(
      'subject' => 'Latest Revisions',
      'content' => planetmath_blocks_blockThemeResultsWithDate(planetmath_blocks_queryRevisions('article', 'changed'),'changed')
  );
}

function planetmath_blocks_block_userList() {
  return array(
      'subject' => 'Top Users',
      'content' => planetmath_blocks_blockThemeUserListResults(planetmath_blocks_queryUserList())
  );
}

function planetmath_blocks_block_everythingElse() {
  return array(
      'subject' => 'Recent Activity',
      'content' => planetmath_blocks_blockThemeEverythingElseWithDate(planetmath_blocks_queryEverythingElse(),'created')
  );
}

function planetmath_blocks_block_personalFeed() {
  global $user;
  return array(
      'subject' => 'Personal Feed',
      'content' => planetmath_blocks_blockThemeMyPersonalResults(planetmath_blocks_queryPersonalResponses($user->uid))
  );
}

//  text-shadow: 1px 1px 1px #5dd8e8; filter: dropshadow(color=#5dd8e8, offx=1, offy=1); 
function planetmath_blocks_block_welcome() {
  return array(
      'subject' => 'Welcome!',
      'content' => t("<p style='text-align:justify';>PlanetMath is a virtual community which aims to help make mathematical knowledge more accessible. PlanetMath's content is created collaboratively: the main feature is the mathematics encyclopedia with entries written and reviewed by members. The entries are contributed under the terms of the !ccbysa in order to preserve the rights of authors, readers and other content creators in a sensible way.  We use !latex, the
!linguafranca of the worldwide mathematical community.</p>
<p style='text-align:justify';>On <span style='text-shadow: 1px 1px 1px #637173;filter: dropshadow(color=#637173, offx=1, offy=1);'>February 13<sup>th</sup> 2013</span>, PlanetMath.org was updated to use the new software system !planetary.  Some release notes are !here -- please report any remaining bugs in the !bugsforum.  You can find the old Noösphere-based system on !oldsite.</p>", 
		     array('!ccbysa' =>
			   l("Creative Commons By/Share-Alike License",
			     "http://creativecommons.org/licenses/by-sa/2.0/"),
			   '!latex' => 
			   l("LaTeX", "http://en.wikibooks.org/wiki/LaTeX"),
			   '!linguafranca' => '<em>lingua franca</em>',
			   '!planetary' => l('Planetary','http://trac.mathweb.org/planetary/'),
			   '!here' => 
			   l("here", "node/87277"),
			   '!bugsforum' => 
			   l("Planetary Bugs Forum", "forums/planetary-bugs"),
			   '!oldsite' => 
			   l("noosphere.planetmath.org", "http://noosphere.planetmath.org")
			   )
		     )
	       );
}

/**
 * Implementation of hook_block_view
 */
function planetmath_blocks_block_view($delta = '') {
  $block = array();

  if ($delta == 'news') {
    $block = array(
          'subject' => t("News"),
          'content' => planetmath_blocks_blockThemeResultsWithDate(planetmath_blocks_queryBasic('news'),'created')
      );
  }

  $block_names = array('request' => 'Requests',
		       'forum' => 'Messages');

  foreach ($block_names as $name => $blocktitle) {
    if ($delta == $name) {
      $block = array(
          'subject' => t(ucfirst($blocktitle)),
          'content' => planetmath_blocks_blockThemeResultsWithDate(planetmath_blocks_queryGeneral($name),'created')
      );
    }
  }

  if ($delta == 'article'){
    $block = array(
		   'subject'=> "New in Encyclopedia",
		   'content'=> planetmath_blocks_blockThemeResultsWithDateBold(planetmath_blocks_queryEncyclopedia()));
  }

  if ($delta == 'correction') {
    $block = planetmath_blocks_block_corrections(arg(1));
  }

  if ($delta == 'solution') {
    $block = planetmath_blocks_block_solutions(arg(1));
  }
  
  if ($delta == 'problem') {
    $block = planetmath_blocks_block_problems(arg(1));
  }

  if ($delta == 'reverseproblem') {
    $block = planetmath_blocks_block_reverseproblems(arg(1));
  }

  if ($delta == 'childarticles') {
    $block = planetmath_blocks_block_childarticles(arg(1));
  }

  if ($delta == 'review') {
    $block = planetmath_blocks_block_reviews(arg(1));
  }

  if ($delta == 'revision') {
    $block = planetmath_blocks_block_revisions();
  }

  if ($delta == 'message') {
    $block = planetmath_blocks_block_messages();
  }

  if ($delta == 'userlist') {
    $block = planetmath_blocks_block_userList();
  }

  if ($delta == 'cross-ref') {
    $block = planetmath_blocks_crossRefMockBlock();
  }

  if ($delta == 'everything-else') {
    $block = planetmath_blocks_block_everythingElse();
  }

  if ($delta == 'pversion') {
    $block = planetmath_blocks_block_versions(arg(1));
  }

  if ($delta == 'provenance') {
    $block = planetmath_blocks_block_provenance(arg(1));
  }

  if ($delta == 'personal-feed') {
    $block = planetmath_blocks_block_personalFeed();
  }

  if ($delta == 'welcome') {
    $block = planetmath_blocks_block_welcome();
  }

  return $block;
}

/* Implements hook_views_api
 * This is needed to get our implementation of hook_views_query_alter working
 * See planetmath_blocks.views.inc for details
 */
function planetmath_blocks_views_api() {
  return array(
    'api' => 3, 
    'path' => drupal_get_path('module', 'planetmath_blocks'), 
	       );
}