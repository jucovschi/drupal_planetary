<?php 

/**
 * Custom hooks to get MathML to show up in Apache Solr search results.
 * @author: 
 *     Joe Corneli <holtzermann17@gmail.com> 
 *
 * Based largely on advice from Dave Stuart, see http://drupal.org/node/1827260 
 */

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE
 *
 * - jac: This will presumably need to be repeated for other entity
 *   types that use LaTeX in a different way.
 *
 *        Note, since the actual XHTML is stored somewhere else, we need
 *        to retrieve it, using the md5 hash of the document's content.
 */
function planetary_apachesolr_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  // dd("ENTITY PRINTOUT");
  // dd($entity);
  if($entity->type=='article'){
    $key = $entity->field_latex['und'][0]['document'];
  } else if ($entity->type=='solution') {
    $key = $entity->field_solution_latex['und'][0]['document'];
  } else if ($entity->type=='problem') {
    $key = $entity->field_problem_latex['und'][0]['document'];
  } else if ($entity->type=='question') {
    $key = $entity->field_question_latex['und'][0]['document'];
  } else if ($entity->type=='review') {
    $key = $entity->field_review_latex['und'][0]['document'];
  } else if ($entity->type=='forum') {
    $key = $entity->body['en'][0]['value'];
  }
  $cache = _drutexml_cache_read(md5($key));
  $document->ss_raw_content = planetary_apachesolr_truncateHtml($cache);
}

/**
 * Implementation of hook_apachesolr_query_alter
 * - add the newly indexed field to the return docs from solr
 */
function planetary_apachesolr_apachesolr_query_alter($query) {
  $query->addParam('fl', 'ss_raw_content');
} 

/**
 * Implementation of hook_preprocess_search_result
 * - override the teaser/snippet field in the search result
 */
function planetary_apachesolr_preprocess_search_result(&$variables) {
  $variables['snippet']  = $variables['result']['fields']['ss_raw_content'];
}

/**
 * Implements hook_apachesolr_entity_info_alter().
 */
function planetary_apachesolr_apachesolr_entity_info_alter(&$entity_info) {
  $entity_info['node']['status callback'][] = 'planetary_apachesolr_exclude_private';
}

/**
 * Status callback for ApacheSolr, for nodes.
 */
function planetary_apachesolr_apachesolr_exclude_private($entity_id, $type) {
  if ($type == 'node') {
    $node = node_load($entity_id, NULL, TRUE);
    if (is_object($node)) {
      if (isset($node->field_published) && $node->field_published == 0) {
        return 0;
      }
    }
  }
  return 1;
} 


/**
 * c/o CakePHP et al.
 *
 * planetary_apachesolr_truncateHtml can truncate a string up to a number of characters while preserving whole words and HTML tags
 *
 * @param string $text String to truncate.
 * @param integer $length Length of returned string, including ellipsis.
 * @param string $ending Ending to be appended to the trimmed string.
 * @param boolean $exact If false, $text will not be cut mid-word
 * @param boolean $considerHtml If true, HTML tags would be handled correctly
 *
 * @return string Trimmed string.
 */
function planetary_apachesolr_truncateHtml($text, $length = 450, $ending = '...', $exact = false, $considerHtml = true) {
	if ($considerHtml) {
		// if the plain text is shorter than the maximum length, return the whole text
		if (strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {
			return $text;
		}
		// splits all html-tags to scanable lines
		preg_match_all('/(<.+?>)?([^<>]*)/s', $text, $lines, PREG_SET_ORDER);
		$total_length = strlen($ending);
		$open_tags = array();
		$truncate = '';
		foreach ($lines as $line_matchings) {
			// if there is any html-tag in this line, handle it and add it (uncounted) to the output
			if (!empty($line_matchings[1])) {
				// if it's an "empty element" with or without xhtml-conform closing slash
				if (preg_match('/^<(\s*.+?\/\s*|\s*(img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param)(\s.+?)?)>$/is', $line_matchings[1])) {
					// do nothing
				// if tag is a closing tag
				} else if (preg_match('/^<\s*\/([^\s]+?)\s*>$/s', $line_matchings[1], $tag_matchings)) {
					// delete tag from $open_tags list
					$pos = array_search($tag_matchings[1], $open_tags);
					if ($pos !== false) {
					unset($open_tags[$pos]);
					}
				// if tag is an opening tag
				} else if (preg_match('/^<\s*([^\s>!]+).*?>$/s', $line_matchings[1], $tag_matchings)) {
					// add tag to the beginning of $open_tags list
					array_unshift($open_tags, strtolower($tag_matchings[1]));
				}
				// add html-tag to $truncate'd text
				$truncate .= $line_matchings[1];
			}
			// calculate the length of the plain text part of the line; handle entities as one character
			$content_length = strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|[0-9a-f]{1,6};/i', ' ', $line_matchings[2]));
			if ($total_length+$content_length> $length) {
				// the number of characters which are left
				$left = $length - $total_length;
				$entities_length = 0;
				// search for html entities
				if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|[0-9a-f]{1,6};/i', $line_matchings[2], $entities, PREG_OFFSET_CAPTURE)) {
					// calculate the real length of all entities in the legal range
					foreach ($entities[0] as $entity) {
						if ($entity[1]+1-$entities_length <= $left) {
							$left--;
							$entities_length += strlen($entity[0]);
						} else {
							// no more characters left
							break;
						}
					}
				}
				$truncate .= substr($line_matchings[2], 0, $left+$entities_length);
				// maximum lenght is reached, so get off the loop
				break;
			} else {
				$truncate .= $line_matchings[2];
				$total_length += $content_length;
			}
			// if the maximum length is reached, get off the loop
			if($total_length>= $length) {
				break;
			}
		}
	} else {
		if (strlen($text) <= $length) {
			return $text;
		} else {
			$truncate = substr($text, 0, $length - strlen($ending));
		}
	}
	// if the words shouldn't be cut in the middle...
	if (!$exact) {
		// ...search the last occurance of a space...
		$spacepos = strrpos($truncate, ' ');
		if (isset($spacepos)) {
			// ...and cut the text in this position
			$truncate = substr($truncate, 0, $spacepos);
		}
	}
	// add the defined ending to the text
	$truncate .= $ending;
	if($considerHtml) {
		// close all unclosed html-tags
		foreach ($open_tags as $tag) {
			$truncate .= '</' . $tag . '>';
		}
	}
	return $truncate;
}