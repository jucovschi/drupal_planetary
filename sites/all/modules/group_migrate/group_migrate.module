<?php
/**
 * @file GroupMigrate module
 * @author holtzermann17@gmail.com
 * @version 1.0
 */

// NOTE: before running this code, make sure the email rerouting
// module is installed and configured properly, otherwise you will
// spam people.

/* STATUS: group_migrate_port_world_writable and
   group_migrate_port_coauthors are running without errors.
   group_migrate_port_planetmath_default_groups_to_og and
   group_migrate_port_planetmath_custom_groups_to_og are giving
   errors after several groups are created.  Why??? */

/* Our porting strategy: Run these functions (actually, they will run
   for you automatically when you visit migrate/grp):
 
 * group_migrate_port_world_writable():

    - There are about 1115 objects that have default "write"
      permissions

    - Create a World Writable group, and put every user into it;
      later, maintain this group using the Rules module

 * group_migrate_port_planetmath_default_groups_to_og():
 * group_migrate_port_planetmath_custom_groups_to_og():

    - There are about 600 groups that are used, and about 10000
      articles that have been shared to some group.

      - 51 custom groups 
      - 238 default groups

    - Each of these groups should be ported directly (users from group
      membership, articles from ACL assignments)
 
 * group_migrate_port_coauthors():

    - There are about 1151 distinct objects shared to 1200 individuals
      via the ACL

    - Create a new group for each object managed in this way, and add
      the users.
 */

// This requires object ids in the old ACL to be the same as nids in Drupal (they are).

  /* The WW group was already created in the profile */
  /* Users will already be there too, because of our hook_user_insert,
     implementation,  planetmath_og_user_insert */

function group_migrate_port_world_writable() {
  $articles = db_query("SELECT objectid FROM {planetmath_acl} WHERE default_or_normal = 'd' and _write = 1 AND objectid > 30000");
  foreach ($articles as $article) {
    planetmath_og_model_addContentToGroup(1,$article->objectid);
    }
  }

/* Next, this is the most straightforward adaptation: groups go to groups */

// This one will deal with buddy lists (238 items expected)...
function group_migrate_port_planetmath_default_groups_to_og() {

  // we need to filter this list according to which users actually EXIST
  // on the new system, otherwise we run into ERRORS.
  //  $res = db_query("SELECT t.groupid, planetmath_groups.userid, planetmath_groups.groupname, planetmath_groups.description  FROM planetmath_groups, ( SELECT COUNT( planetmath_group_members.userid ) AS cnt, planetmath_group_members.groupid FROM planetmath_group_members GROUP BY planetmath_group_members.groupid ) as t WHERE t.cnt > 1 AND planetmath_groups.groupid = t.groupid AND planetmath_groups.description LIKE 'This is the default group for user%'");
  $res = db_query("SELECT t.groupid, pg.userid, pg.groupname, pg.description
FROM planetmath_groups pg, 
     ( SELECT COUNT( pgm.userid ) AS cnt, pgm.groupid
       FROM planetmath_group_members pgm
       GROUP BY pgm.groupid ) AS t,
      users 
WHERE t.cnt > 1
AND pg.userid = users.uid
AND pg.groupid = t.groupid
AND pg.description LIKE 'This is the default group for user%'");
     
  // OUTER LOOP: create og groups corresponding to legacy PM groups
  // (These will be "teams" by default.)
  foreach ($res as $record) {
    $group = planetmath_og_group_add_programmatic("Buddy list for " . $record->groupname, $record->userid, $record->description,'Buddies');

    // IMPORTANT: Set the buddy list *field* on the user object so that the
    // user can find their group!
    $group_owner = user_load($record->userid);
    $group_owner->buddy_list['und'][0]['nid'] = $group->nid;
    user_save($group_owner);
     
    // INNER LOOP ONE: for each group, import users belonging to that group
    $members = db_query("SELECT DISTINCT userid FROM {planetmath_group_members} WHERE {planetmath_group_members}.groupid = :groupid", array(':groupid' => $record->groupid));

    foreach ($members as $member) {
      if($member->userid != $record->userid){
        planetmath_og_model_addUserToGroup($group->nid, $member->userid);
      }
    }
     
    // INNER LOOP TWO: for each group, import its articles
    $articles = db_query("SELECT DISTINCT objectid FROM {planetmath_acl} WHERE user_or_group = 'g' and subjectid = :groupid", array(':groupid' => $record->groupid));
     
    foreach ($articles as $article) {
      planetmath_og_model_addContentToGroup($group->nid, $article->objectid);
    }
  }
}

// ... and this one will deal with public teams (51 items expected)
function group_migrate_port_planetmath_custom_groups_to_og() {
     
  $res = db_query("SELECT t.groupid, pg.userid, pg.groupname, pg.description
FROM planetmath_groups pg, 
     ( SELECT COUNT( pgm.userid ) AS cnt, pgm.groupid
       FROM planetmath_group_members pgm
       GROUP BY pgm.groupid ) AS t,
      users 
WHERE t.cnt > 1
AND pg.userid = users.uid
AND pg.groupid = t.groupid
AND pg.description NOT LIKE 'This is the default group for user%'");
     
  // OUTER LOOP: create og groups corresponding to legacy PM groups
  // (These will be "teams" by default.)
  foreach ($res as $record) {
    $group = planetmath_og_group_add_programmatic($record->groupname, $record->userid, $record->description,'Team');
     
    // INNER LOOP ONE: for each group, import users belonging to that group
    $members = db_query("SELECT DISTINCT userid FROM {planetmath_group_members} WHERE {planetmath_group_members}.groupid = :groupid", array(':groupid' => $record->groupid));
      
    foreach ($members as $member) {
      if($member->userid != $record->userid){
        //$newmember = user_load($member->userid, TRUE);
        planetmath_og_model_addUserToGroup($group->nid, $member->userid);
      }
    }

    // INNER LOOP TWO: for each group, import its articles
    $articles = db_query("SELECT DISTINCT objectid FROM {planetmath_acl} WHERE user_or_group = 'g' and subjectid = :groupid", array(':groupid' => $record->groupid));
     
    dd('running articles...');
    foreach ($articles as $article) {
      //$node = node_load($article->objectid);
      planetmath_og_model_addContentToGroup($group->nid, $article->objectid);
    }
    dd('done with this loop...');
  }
}
	
// There are about 1151 distinct objects shared to 1200 individuals via the ACL
// - Create a new group for each object managed in this way, and add the users.
function group_migrate_port_coauthors () {
  // get the objects that are shared
  $objects = db_query("SELECT DISTINCT {planetmath_acl}.objectid, {planetmath_objects}.name, {planetmath_objects}.title, {planetmath_objects}.userid FROM {planetmath_acl}, {planetmath_objects}, users WHERE planetmath_objects.userid = users.uid AND {planetmath_acl}.user_or_group = 'u' AND {planetmath_acl}.default_or_normal = 'n' AND {planetmath_objects}.uid = {planetmath_acl}.objectid");
	
  // OUTER LOOP: create og groups corresponding to co-author groups for articles
  foreach ($objects as $object) {
    $group = planetmath_og_group_add_programmatic('Editing Group for ' . $object->name, $object->userid, 'Coauthors for ' . $object->title, 'Coauthors');
	
    // INNER LOOP: for each group, import users belonging to that group
    $members = db_query("SELECT DISTINCT subjectid FROM {planetmath_acl} WHERE {planetmath_acl}.objectid = :objectid", array(':objectid' => $object->objectid));
	 
    foreach ($members as $member) {
      if ($member->subjectid != $object->userid && $member->subjectid != -1 && $member->subjectid != 0){
        planetmath_og_model_addUserToGroup($group->nid, $member->subjectid);
      }
    }
	
    // we don't need to loop over articles this time
    planetmath_og_model_addContentToGroup($group->nid, $object->objectid);
  }
}

// experimental
function group_migrate_port_collab_coauthors() {
  // get the objects that are shared
  $objects = db_query("SELECT DISTINCT {planetmath_acl}.objectid, {planetmath_collab}.title, {planetmath_collab}.userid FROM {planetmath_acl}, {planetmath_collab} WHERE {planetmath_acl}.user_or_group = 'u' AND {planetmath_acl}.default_or_normal = 'n' AND {planetmath_collab}.uid = {planetmath_acl}.objectid");
	
  // OUTER LOOP: create og groups corresponding to co-author groups for articles
  foreach ($objects as $object) {
    $group = planetmath_og_group_add_programmatic('Editing Group for ' . $object->title, $object->userid, 'Coauthors for ' . $object->title, 'Coauthors');
	
    // INNER LOOP: for each group, import users belonging to that group
    $members = db_query("SELECT DISTINCT subjectid FROM {planetmath_acl} WHERE {planetmath_acl}.objectid = :objectid", array(':objectid' => $object->objectid));
	 
    foreach ($members as $member) {
      if ($member->subjectid != $object->userid && $member->subjectid != -1 && $member->subjectid != 0){
        planetmath_og_model_addUserToGroup($group->nid, $member->subjectid);
      }
    }
	
    // we don't need to loop over articles this time
    planetmath_og_model_addContentToGroup($group->nid, $object->objectid);
  }
}

// You can check to see if the groups are created by visiting admin/content
function group_migrate_run_group_migration(){
  set_time_limit(0);
  group_migrate_port_world_writable();
  group_migrate_port_planetmath_default_groups_to_og();
  group_migrate_port_planetmath_custom_groups_to_og();
  group_migrate_port_coauthors();
  group_migrate_port_collab_coauthors();
  return 'Groups created.';
}


/**
 * Drupal hooks
 */

/**
 * Implementation of hook_menu()
 */
function group_migrate_menu(){
    $items ['migrate/grp'] = array(
          'title' => 'Copy Groups',
          'description' => 'Rewrites old permissions as organic groups',
          'page callback' => 'group_migrate_run_group_migration',
          'type' => MENU_CALLBACK,
          'access arguments' => array('administer features')
    );
    return $items;
}
